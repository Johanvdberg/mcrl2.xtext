/*
 * generated by Xtext 2.11.0.RC2
 */
package test.multiname.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import test.multiname.dsl.ide.contentassist.antlr.internal.InternalMultiNameDslParser;
import test.multiname.dsl.services.MultiNameDslGrammarAccess;

public class MultiNameDslParser extends AbstractContentAssistParser {

	@Inject
	private MultiNameDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMultiNameDslParser createParser() {
		InternalMultiNameDslParser result = new InternalMultiNameDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNameAccess().getAlternatives(), "rule__Name__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getFuncsAccess().getGroup(), "rule__Funcs__Group__0");
					put(grammarAccess.getFuncsAccess().getGroup_2(), "rule__Funcs__Group_2__0");
					put(grammarAccess.getVarsAccess().getGroup(), "rule__Vars__Group__0");
					put(grammarAccess.getModelAccess().getModulesAssignment(), "rule__Model__ModulesAssignment");
					put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
					put(grammarAccess.getModuleAccess().getVarsAssignment_2(), "rule__Module__VarsAssignment_2");
					put(grammarAccess.getModuleAccess().getFuncsAssignment_3(), "rule__Module__FuncsAssignment_3");
					put(grammarAccess.getVarNameAccess().getNameAssignment(), "rule__VarName__NameAssignment");
					put(grammarAccess.getFuncNameAccess().getNameAssignment(), "rule__FuncName__NameAssignment");
					put(grammarAccess.getFuncsAccess().getLeftAssignment_1(), "rule__Funcs__LeftAssignment_1");
					put(grammarAccess.getFuncsAccess().getBracketAssignment_2_0(), "rule__Funcs__BracketAssignment_2_0");
					put(grammarAccess.getFuncsAccess().getRightAssignment_4(), "rule__Funcs__RightAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MultiNameDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MultiNameDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
