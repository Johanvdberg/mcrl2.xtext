/*
 * generated by Xtext 2.11.0.beta2
 */
package tuks.mcrl2.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MclrDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftMCRL2SpecEltParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cInitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitInitParserRuleCall_1_0 = (RuleCall)cInitAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightMCRL2SpecEltParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Model:
		//	-> left+=mCRL2SpecElt* -> init=Init -> right+=mCRL2SpecElt*;
		@Override public ParserRule getRule() { return rule; }
		
		//-> left+=mCRL2SpecElt* -> init=Init -> right+=mCRL2SpecElt*
		public Group getGroup() { return cGroup; }
		
		//-> left+=mCRL2SpecElt*
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//mCRL2SpecElt
		public RuleCall getLeftMCRL2SpecEltParserRuleCall_0_0() { return cLeftMCRL2SpecEltParserRuleCall_0_0; }
		
		//-> init=Init
		public Assignment getInitAssignment_1() { return cInitAssignment_1; }
		
		//Init
		public RuleCall getInitInitParserRuleCall_1_0() { return cInitInitParserRuleCall_1_0; }
		
		//-> right+=mCRL2SpecElt*
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//mCRL2SpecElt
		public RuleCall getRightMCRL2SpecEltParserRuleCall_2_0() { return cRightMCRL2SpecEltParserRuleCall_2_0; }
	}
	public class ActionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ActionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ActionName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ActionNameListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ActionNameList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cId_listAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cId_listActionNameCrossReference_0_0 = (CrossReference)cId_listAssignment_0.eContents().get(0);
		private final RuleCall cId_listActionNameIDTerminalRuleCall_0_0_1 = (RuleCall)cId_listActionNameCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cId_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cId_listActionNameCrossReference_1_1_0 = (CrossReference)cId_listAssignment_1_1.eContents().get(0);
		private final RuleCall cId_listActionNameIDTerminalRuleCall_1_1_0_1 = (RuleCall)cId_listActionNameCrossReference_1_1_0.eContents().get(1);
		
		//ActionNameList:
		//	id_list+=[ActionName] (',' id_list+=[ActionName])*;
		@Override public ParserRule getRule() { return rule; }
		
		//id_list+=[ActionName] (',' id_list+=[ActionName])*
		public Group getGroup() { return cGroup; }
		
		//id_list+=[ActionName]
		public Assignment getId_listAssignment_0() { return cId_listAssignment_0; }
		
		//[ActionName]
		public CrossReference getId_listActionNameCrossReference_0_0() { return cId_listActionNameCrossReference_0_0; }
		
		//ID
		public RuleCall getId_listActionNameIDTerminalRuleCall_0_0_1() { return cId_listActionNameIDTerminalRuleCall_0_0_1; }
		
		//(',' id_list+=[ActionName])*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//id_list+=[ActionName]
		public Assignment getId_listAssignment_1_1() { return cId_listAssignment_1_1; }
		
		//[ActionName]
		public CrossReference getId_listActionNameCrossReference_1_1_0() { return cId_listActionNameCrossReference_1_1_0; }
		
		//ID
		public RuleCall getId_listActionNameIDTerminalRuleCall_1_1_0_1() { return cId_listActionNameIDTerminalRuleCall_1_1_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIdActionNameCrossReference_0_0 = (CrossReference)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdActionNameIDTerminalRuleCall_0_0_1 = (RuleCall)cIdActionNameCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpDataExprListParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Action:
		//	id=[ActionName] ('(' exp=DataExprList ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=[ActionName] ('(' exp=DataExprList ')')?
		public Group getGroup() { return cGroup; }
		
		//id=[ActionName]
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//[ActionName]
		public CrossReference getIdActionNameCrossReference_0_0() { return cIdActionNameCrossReference_0_0; }
		
		//ID
		public RuleCall getIdActionNameIDTerminalRuleCall_0_0_1() { return cIdActionNameIDTerminalRuleCall_0_0_1; }
		
		//('(' exp=DataExprList ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//exp=DataExprList
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//DataExprList
		public RuleCall getExpDataExprListParserRuleCall_1_1_0() { return cExpDataExprListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ActIdSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ActIdSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdsActionNameListParserRuleCall_1_0 = (RuleCall)cIdsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ActIdSet:
		//	'{' ids=ActionNameList '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ids=ActionNameList '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//ids=ActionNameList
		public Assignment getIdsAssignment_1() { return cIdsAssignment_1; }
		
		//ActionNameList
		public RuleCall getIdsActionNameListParserRuleCall_1_0() { return cIdsActionNameListParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdVarNameParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cData_expAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cData_expDataExprParserRuleCall_2_0 = (RuleCall)cData_expAssignment_2.eContents().get(0);
		
		//Assignment:
		//	id=VarName '=' data_exp=DataExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//id=VarName '=' data_exp=DataExpr
		public Group getGroup() { return cGroup; }
		
		//id=VarName
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//VarName
		public RuleCall getIdVarNameParserRuleCall_0_0() { return cIdVarNameParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//data_exp=DataExpr
		public Assignment getData_expAssignment_2() { return cData_expAssignment_2; }
		
		//DataExpr
		public RuleCall getData_expDataExprParserRuleCall_2_0() { return cData_expDataExprParserRuleCall_2_0; }
	}
	public class AssignmentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.AssignmentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssAssignmentParserRuleCall_0_0 = (RuleCall)cAssAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssAssignmentParserRuleCall_1_1_0 = (RuleCall)cAssAssignment_1_1.eContents().get(0);
		
		//AssignmentList:
		//	ass+=Assignment (',' ass+=Assignment)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ass+=Assignment (',' ass+=Assignment)*
		public Group getGroup() { return cGroup; }
		
		//ass+=Assignment
		public Assignment getAssAssignment_0() { return cAssAssignment_0; }
		
		//Assignment
		public RuleCall getAssAssignmentParserRuleCall_0_0() { return cAssAssignmentParserRuleCall_0_0; }
		
		//(',' ass+=Assignment)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ass+=Assignment
		public Assignment getAssAssignment_1_1() { return cAssAssignment_1_1; }
		
		//Assignment
		public RuleCall getAssAssignmentParserRuleCall_1_1_0() { return cAssAssignmentParserRuleCall_1_1_0; }
	}
	public class ActListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ActList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cId_listAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cId_listActionNameParserRuleCall_0_0 = (RuleCall)cId_listAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cId_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cId_listActionNameParserRuleCall_1_1_0 = (RuleCall)cId_listAssignment_1_1.eContents().get(0);
		
		//ActList:
		//	id_list+=ActionName (',' id_list+=ActionName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//id_list+=ActionName (',' id_list+=ActionName)*
		public Group getGroup() { return cGroup; }
		
		//id_list+=ActionName
		public Assignment getId_listAssignment_0() { return cId_listAssignment_0; }
		
		//ActionName
		public RuleCall getId_listActionNameParserRuleCall_0_0() { return cId_listActionNameParserRuleCall_0_0; }
		
		//(',' id_list+=ActionName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//id_list+=ActionName
		public Assignment getId_listAssignment_1_1() { return cId_listAssignment_1_1; }
		
		//ActionName
		public RuleCall getId_listActionNameParserRuleCall_1_1_0() { return cId_listActionNameParserRuleCall_1_1_0; }
	}
	public class ActDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ActDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdActListParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSortAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSortSortExprParserRuleCall_1_1_0 = (RuleCall)cSortAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ActDecl:
		//	id=ActList (':' sort=SortExpr)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//id=ActList (':' sort=SortExpr)? ';'
		public Group getGroup() { return cGroup; }
		
		//id=ActList
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ActList
		public RuleCall getIdActListParserRuleCall_0_0() { return cIdActListParserRuleCall_0_0; }
		
		//(':' sort=SortExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//sort=SortExpr
		public Assignment getSortAssignment_1_1() { return cSortAssignment_1_1; }
		
		//SortExpr
		public RuleCall getSortSortExprParserRuleCall_1_1_0() { return cSortSortExprParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ActSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ActSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAct_listAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAct_listActDeclParserRuleCall_1_0 = (RuleCall)cAct_listAssignment_1.eContents().get(0);
		
		//ActSpec:
		//	'act' act_list+=ActDecl+;
		@Override public ParserRule getRule() { return rule; }
		
		//'act' act_list+=ActDecl+
		public Group getGroup() { return cGroup; }
		
		//'act'
		public Keyword getActKeyword_0() { return cActKeyword_0; }
		
		//act_list+=ActDecl+
		public Assignment getAct_listAssignment_1() { return cAct_listAssignment_1; }
		
		//ActDecl
		public RuleCall getAct_listActDeclParserRuleCall_1_0() { return cAct_listActDeclParserRuleCall_1_0; }
	}
	public class BagEnumEltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.BagEnumElt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftDataExprParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightDataExprParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//BagEnumElt:
		//	left=DataExpr ':' right=DataExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//left=DataExpr ':' right=DataExpr
		public Group getGroup() { return cGroup; }
		
		//left=DataExpr
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//DataExpr
		public RuleCall getLeftDataExprParserRuleCall_0_0() { return cLeftDataExprParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//right=DataExpr
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//DataExpr
		public RuleCall getRightDataExprParserRuleCall_2_0() { return cRightDataExprParserRuleCall_2_0; }
	}
	public class BagEnumEltListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.BagEnumEltList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBag_listAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBag_listBagEnumEltParserRuleCall_0_0 = (RuleCall)cBag_listAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBag_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBag_listBagEnumEltParserRuleCall_1_1_0 = (RuleCall)cBag_listAssignment_1_1.eContents().get(0);
		
		//BagEnumEltList:
		//	bag_list+=BagEnumElt (',' bag_list+=BagEnumElt)*;
		@Override public ParserRule getRule() { return rule; }
		
		//bag_list+=BagEnumElt (',' bag_list+=BagEnumElt)*
		public Group getGroup() { return cGroup; }
		
		//bag_list+=BagEnumElt
		public Assignment getBag_listAssignment_0() { return cBag_listAssignment_0; }
		
		//BagEnumElt
		public RuleCall getBag_listBagEnumEltParserRuleCall_0_0() { return cBag_listBagEnumEltParserRuleCall_0_0; }
		
		//(',' bag_list+=BagEnumElt)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//bag_list+=BagEnumElt
		public Assignment getBag_listAssignment_1_1() { return cBag_listAssignment_1_1; }
		
		//BagEnumElt
		public RuleCall getBag_listBagEnumEltParserRuleCall_1_1_0() { return cBag_listBagEnumEltParserRuleCall_1_1_0; }
	}
	public class ConstrNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ConstrName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ConstrName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConstrDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ConstrDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdConstrNameParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cProjAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cProjProjDeclListParserRuleCall_1_0_1_0 = (RuleCall)cProjAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cRight_idAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRight_idIDTerminalRuleCall_2_0_1_0 = (RuleCall)cRight_idAssignment_2_0_1.eContents().get(0);
		
		//ConstrDecl:
		//	id=ConstrName -> ('(' proj=ProjDeclList ')')? -> ('?' right_id=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ConstrName -> ('(' proj=ProjDeclList ')')? -> ('?' right_id=ID)?
		public Group getGroup() { return cGroup; }
		
		//id=ConstrName
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ConstrName
		public RuleCall getIdConstrNameParserRuleCall_0_0() { return cIdConstrNameParserRuleCall_0_0; }
		
		//-> ('(' proj=ProjDeclList ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'(' proj=ProjDeclList ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//proj=ProjDeclList
		public Assignment getProjAssignment_1_0_1() { return cProjAssignment_1_0_1; }
		
		//ProjDeclList
		public RuleCall getProjProjDeclListParserRuleCall_1_0_1_0() { return cProjProjDeclListParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//-> ('?' right_id=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'?' right_id=ID
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2_0_0() { return cQuestionMarkKeyword_2_0_0; }
		
		//right_id=ID
		public Assignment getRight_idAssignment_2_0_1() { return cRight_idAssignment_2_0_1; }
		
		//ID
		public RuleCall getRight_idIDTerminalRuleCall_2_0_1_0() { return cRight_idIDTerminalRuleCall_2_0_1_0; }
	}
	public class ConstrDeclListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ConstrDeclList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclConstrDeclParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclConstrDeclParserRuleCall_1_1_0 = (RuleCall)cDeclAssignment_1_1.eContents().get(0);
		
		//ConstrDeclList:
		//	decl+=ConstrDecl ('|' decl+=ConstrDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//decl+=ConstrDecl ('|' decl+=ConstrDecl)*
		public Group getGroup() { return cGroup; }
		
		//decl+=ConstrDecl
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }
		
		//ConstrDecl
		public RuleCall getDeclConstrDeclParserRuleCall_0_0() { return cDeclConstrDeclParserRuleCall_0_0; }
		
		//('|' decl+=ConstrDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//decl+=ConstrDecl
		public Assignment getDeclAssignment_1_1() { return cDeclAssignment_1_1; }
		
		//ConstrDecl
		public RuleCall getDeclConstrDeclParserRuleCall_1_1_0() { return cDeclConstrDeclParserRuleCall_1_1_0; }
	}
	public class ConsSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ConsSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdsConstrNameParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ConsSpec:
		//	'cons' (ids+=ConstrName ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//'cons' (ids+=ConstrName ';')+
		public Group getGroup() { return cGroup; }
		
		//'cons'
		public Keyword getConsKeyword_0() { return cConsKeyword_0; }
		
		//(ids+=ConstrName ';')+
		public Group getGroup_1() { return cGroup_1; }
		
		//ids+=ConstrName
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }
		
		//ConstrName
		public RuleCall getIdsConstrNameParserRuleCall_1_0_0() { return cIdsConstrNameParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class DataNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.DataName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DataName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DataExprUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.DataExprUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerDataExprUnitTermParserRuleCall_0_0 = (RuleCall)cLowerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cDataAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cDataDataExprListParserRuleCall_1_0_1_0 = (RuleCall)cDataAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		
		//DataExprUnit:
		//	lower=DataExprUnitTerm -> ('(' data=DataExprList ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//lower=DataExprUnitTerm -> ('(' data=DataExprList ')')?
		public Group getGroup() { return cGroup; }
		
		//lower=DataExprUnitTerm
		public Assignment getLowerAssignment_0() { return cLowerAssignment_0; }
		
		//DataExprUnitTerm
		public RuleCall getLowerDataExprUnitTermParserRuleCall_0_0() { return cLowerDataExprUnitTermParserRuleCall_0_0; }
		
		//-> ('(' data=DataExprList ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'(' data=DataExprList ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//data=DataExprList
		public Assignment getDataAssignment_1_0_1() { return cDataAssignment_1_0_1; }
		
		//DataExprList
		public RuleCall getDataDataExprListParserRuleCall_1_0_1_0() { return cDataDataExprListParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
	}
	public class DataExprUnitTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.DataExprUnitTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdDataNameParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cIs_trueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cIs_trueTrueKeyword_2_0 = (Keyword)cIs_trueAssignment_2.eContents().get(0);
		private final Assignment cIs_falseAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cIs_falseFalseKeyword_3_0 = (Keyword)cIs_falseAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpDataExprParserRuleCall_4_1_0 = (RuleCall)cExpAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Assignment cIs_expAssignment_5_0_0 = (Assignment)cAlternatives_5_0.eContents().get(0);
		private final Keyword cIs_expExclamationMarkKeyword_5_0_0_0 = (Keyword)cIs_expAssignment_5_0_0.eContents().get(0);
		private final Assignment cIs_minusAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final Keyword cIs_minusHyphenMinusKeyword_5_0_1_0 = (Keyword)cIs_minusAssignment_5_0_1.eContents().get(0);
		private final Assignment cIs_sharpAssignment_5_0_2 = (Assignment)cAlternatives_5_0.eContents().get(2);
		private final Keyword cIs_sharpNumberSignKeyword_5_0_2_0 = (Keyword)cIs_sharpAssignment_5_0_2.eContents().get(0);
		private final Assignment cUnitAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnitDataExprUnitParserRuleCall_5_1_0 = (RuleCall)cUnitAssignment_5_1.eContents().get(0);
		
		//DataExprUnitTerm:
		//	id=DataName | number=INT | is_true?='true' | is_false?='false' |
		//	'(' exp=DataExpr ')' | (is_exp?='!' | is_minus?='-' | is_sharp?='#') unit=DataExprUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//id=DataName | number=INT | is_true?='true' | is_false?='false' | '(' exp=DataExpr ')' | (is_exp?='!' | is_minus?='-' |
		//is_sharp?='#') unit=DataExprUnit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=DataName
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//DataName
		public RuleCall getIdDataNameParserRuleCall_0_0() { return cIdDataNameParserRuleCall_0_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
		
		//is_true?='true'
		public Assignment getIs_trueAssignment_2() { return cIs_trueAssignment_2; }
		
		//'true'
		public Keyword getIs_trueTrueKeyword_2_0() { return cIs_trueTrueKeyword_2_0; }
		
		//is_false?='false'
		public Assignment getIs_falseAssignment_3() { return cIs_falseAssignment_3; }
		
		//'false'
		public Keyword getIs_falseFalseKeyword_3_0() { return cIs_falseFalseKeyword_3_0; }
		
		//'(' exp=DataExpr ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//exp=DataExpr
		public Assignment getExpAssignment_4_1() { return cExpAssignment_4_1; }
		
		//DataExpr
		public RuleCall getExpDataExprParserRuleCall_4_1_0() { return cExpDataExprParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//(is_exp?='!' | is_minus?='-' | is_sharp?='#') unit=DataExprUnit
		public Group getGroup_5() { return cGroup_5; }
		
		//is_exp?='!' | is_minus?='-' | is_sharp?='#'
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }
		
		//is_exp?='!'
		public Assignment getIs_expAssignment_5_0_0() { return cIs_expAssignment_5_0_0; }
		
		//'!'
		public Keyword getIs_expExclamationMarkKeyword_5_0_0_0() { return cIs_expExclamationMarkKeyword_5_0_0_0; }
		
		//is_minus?='-'
		public Assignment getIs_minusAssignment_5_0_1() { return cIs_minusAssignment_5_0_1; }
		
		//'-'
		public Keyword getIs_minusHyphenMinusKeyword_5_0_1_0() { return cIs_minusHyphenMinusKeyword_5_0_1_0; }
		
		//is_sharp?='#'
		public Assignment getIs_sharpAssignment_5_0_2() { return cIs_sharpAssignment_5_0_2; }
		
		//'#'
		public Keyword getIs_sharpNumberSignKeyword_5_0_2_0() { return cIs_sharpNumberSignKeyword_5_0_2_0; }
		
		//unit=DataExprUnit
		public Assignment getUnitAssignment_5_1() { return cUnitAssignment_5_1; }
		
		//DataExprUnit
		public RuleCall getUnitDataExprUnitParserRuleCall_5_1_0() { return cUnitDataExprUnitParserRuleCall_5_1_0; }
	}
	public class DataExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.DataExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftDataExpr1ParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRight_1Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRight_1DataExprParserRuleCall_1_0_1_0 = (RuleCall)cRight_1Assignment_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cRight_2Assignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cRight_2DataExprParserRuleCall_1_0_3_0 = (RuleCall)cRight_2Assignment_1_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightDataExprListParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//DataExpr:
		//	left=DataExpr1 ('[' right_1=DataExpr '->' right_2=DataExpr ']' |
		//	'(' right=DataExprList ')');
		@Override public ParserRule getRule() { return rule; }
		
		//left=DataExpr1 ('[' right_1=DataExpr '->' right_2=DataExpr ']' | '(' right=DataExprList ')')
		public Group getGroup() { return cGroup; }
		
		//left=DataExpr1
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//DataExpr1
		public RuleCall getLeftDataExpr1ParserRuleCall_0_0() { return cLeftDataExpr1ParserRuleCall_0_0; }
		
		//'[' right_1=DataExpr '->' right_2=DataExpr ']' | '(' right=DataExprList ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'[' right_1=DataExpr '->' right_2=DataExpr ']'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }
		
		//right_1=DataExpr
		public Assignment getRight_1Assignment_1_0_1() { return cRight_1Assignment_1_0_1; }
		
		//DataExpr
		public RuleCall getRight_1DataExprParserRuleCall_1_0_1_0() { return cRight_1DataExprParserRuleCall_1_0_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_2() { return cHyphenMinusGreaterThanSignKeyword_1_0_2; }
		
		//right_2=DataExpr
		public Assignment getRight_2Assignment_1_0_3() { return cRight_2Assignment_1_0_3; }
		
		//DataExpr
		public RuleCall getRight_2DataExprParserRuleCall_1_0_3_0() { return cRight_2DataExprParserRuleCall_1_0_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_4() { return cRightSquareBracketKeyword_1_0_4; }
		
		//'(' right=DataExprList ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//right=DataExprList
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }
		
		//DataExprList
		public RuleCall getRightDataExprListParserRuleCall_1_1_1_0() { return cRightDataExprListParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class DataExpr1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.DataExpr1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftDataExpr2ParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1 = (Keyword)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_0_2 = (Keyword)cAlternatives_1_0_0.eContents().get(2);
		private final Keyword cDivKeyword_1_0_0_3 = (Keyword)cAlternatives_1_0_0.eContents().get(3);
		private final Keyword cModKeyword_1_0_0_4 = (Keyword)cAlternatives_1_0_0.eContents().get(4);
		private final Keyword cAsteriskKeyword_1_0_0_5 = (Keyword)cAlternatives_1_0_0.eContents().get(5);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightDataExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//DataExpr1:
		//	left=DataExpr2 (-> ('+' | '-' | '/' | 'div' | 'mod' | '*') right=DataExpr);
		@Override public ParserRule getRule() { return rule; }
		
		//left=DataExpr2 (-> ('+' | '-' | '/' | 'div' | 'mod' | '*') right=DataExpr)
		public Group getGroup() { return cGroup; }
		
		//left=DataExpr2
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//DataExpr2
		public RuleCall getLeftDataExpr2ParserRuleCall_0_0() { return cLeftDataExpr2ParserRuleCall_0_0; }
		
		//-> ('+' | '-' | '/' | 'div' | 'mod' | '*') right=DataExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//-> ('+' | '-' | '/' | 'div' | 'mod' | '*')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'+' | '-' | '/' | 'div' | 'mod' | '*'
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0_1() { return cHyphenMinusKeyword_1_0_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_0_2() { return cSolidusKeyword_1_0_0_2; }
		
		//'div'
		public Keyword getDivKeyword_1_0_0_3() { return cDivKeyword_1_0_0_3; }
		
		//'mod'
		public Keyword getModKeyword_1_0_0_4() { return cModKeyword_1_0_0_4; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_5() { return cAsteriskKeyword_1_0_0_5; }
		
		//right=DataExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//DataExpr
		public RuleCall getRightDataExprParserRuleCall_1_1_0() { return cRightDataExprParserRuleCall_1_1_0; }
	}
	public class DataExpr2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.DataExpr2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftDataExprTermParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_0_1 = (Keyword)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0_0_2 = (Keyword)cAlternatives_1_0_0.eContents().get(2);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_3 = (Keyword)cAlternatives_1_0_0.eContents().get(3);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_4 = (Keyword)cAlternatives_1_0_0.eContents().get(4);
		private final Keyword cLessThanSignKeyword_1_0_0_5 = (Keyword)cAlternatives_1_0_0.eContents().get(5);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_0_6 = (Keyword)cAlternatives_1_0_0.eContents().get(6);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_7 = (Keyword)cAlternatives_1_0_0.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_1_0_0_8 = (Keyword)cAlternatives_1_0_0.eContents().get(8);
		private final Keyword cInKeyword_1_0_0_9 = (Keyword)cAlternatives_1_0_0.eContents().get(9);
		private final Keyword cVerticalLineGreaterThanSignKeyword_1_0_0_10 = (Keyword)cAlternatives_1_0_0.eContents().get(10);
		private final Keyword cLessThanSignVerticalLineKeyword_1_0_0_11 = (Keyword)cAlternatives_1_0_0.eContents().get(11);
		private final Keyword cPlusSignPlusSignKeyword_1_0_0_12 = (Keyword)cAlternatives_1_0_0.eContents().get(12);
		private final Keyword cFullStopKeyword_1_0_0_13 = (Keyword)cAlternatives_1_0_0.eContents().get(13);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightDataExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//DataExpr2:
		//	left=DataExprTerm (-> ('=>' | '||' | '&&' | '==' | '!=' | '<' | '<=' | '>=' | '>' | 'in' | '|>' | '<|' | '++' | '.')
		//	right=DataExpr // |
		//	//'whr' right_list=AssignmentList 'end'
		//);
		@Override public ParserRule getRule() { return rule; }
		
		//left=DataExprTerm (-> ('=>' | '||' | '&&' | '==' | '!=' | '<' | '<=' | '>=' | '>' | 'in' | '|>' | '<|' | '++' | '.')
		//right=DataExpr // |
		////'whr' right_list=AssignmentList 'end'
		//)
		public Group getGroup() { return cGroup; }
		
		//left=DataExprTerm
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//DataExprTerm
		public RuleCall getLeftDataExprTermParserRuleCall_0_0() { return cLeftDataExprTermParserRuleCall_0_0; }
		
		//-> ('=>' | '||' | '&&' | '==' | '!=' | '<' | '<=' | '>=' | '>' | 'in' | '|>' | '<|' | '++' | '.') right=DataExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//-> ('=>' | '||' | '&&' | '==' | '!=' | '<' | '<=' | '>=' | '>' | 'in' | '|>' | '<|' | '++' | '.')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'=>' | '||' | '&&' | '==' | '!=' | '<' | '<=' | '>=' | '>' | 'in' | '|>' | '<|' | '++' | '.'
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0_0_0() { return cEqualsSignGreaterThanSignKeyword_1_0_0_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0_0_1() { return cVerticalLineVerticalLineKeyword_1_0_0_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0_0_2() { return cAmpersandAmpersandKeyword_1_0_0_2; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_3() { return cEqualsSignEqualsSignKeyword_1_0_0_3; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_4() { return cExclamationMarkEqualsSignKeyword_1_0_0_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0_5() { return cLessThanSignKeyword_1_0_0_5; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_0_6() { return cLessThanSignEqualsSignKeyword_1_0_0_6; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_7() { return cGreaterThanSignEqualsSignKeyword_1_0_0_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_0_8() { return cGreaterThanSignKeyword_1_0_0_8; }
		
		//'in'
		public Keyword getInKeyword_1_0_0_9() { return cInKeyword_1_0_0_9; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_1_0_0_10() { return cVerticalLineGreaterThanSignKeyword_1_0_0_10; }
		
		//'<|'
		public Keyword getLessThanSignVerticalLineKeyword_1_0_0_11() { return cLessThanSignVerticalLineKeyword_1_0_0_11; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_0_0_12() { return cPlusSignPlusSignKeyword_1_0_0_12; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0_13() { return cFullStopKeyword_1_0_0_13; }
		
		//right=DataExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//DataExpr
		public RuleCall getRightDataExprParserRuleCall_1_1_0() { return cRightDataExprParserRuleCall_1_1_0; }
	}
	public class DataExprTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.DataExprTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVar_idAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cVar_idVarNameCrossReference_0_0 = (CrossReference)cVar_idAssignment_0.eContents().get(0);
		private final RuleCall cVar_idVarNameIDTerminalRuleCall_0_0_1 = (RuleCall)cVar_idVarNameCrossReference_0_0.eContents().get(1);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Assignment cIs_trueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cIs_trueTrueKeyword_2_0 = (Keyword)cIs_trueAssignment_2.eContents().get(0);
		private final Assignment cIs_falseAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cIs_falseFalseKeyword_3_0 = (Keyword)cIs_falseAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cIs_sqaure_bracketAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cIs_sqaure_bracketLeftSquareBracketKeyword_4_0_0 = (Keyword)cIs_sqaure_bracketAssignment_4_0.eContents().get(0);
		private final Assignment cData_listAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cData_listDataExprListParserRuleCall_4_1_0 = (RuleCall)cData_listAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cIs_curly_bracketAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cIs_curly_bracketLeftCurlyBracketKeyword_5_0_0 = (Keyword)cIs_curly_bracketAssignment_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cIs_colonAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final Keyword cIs_colonColonKeyword_5_1_0_0 = (Keyword)cIs_colonAssignment_5_1_0.eContents().get(0);
		private final Assignment cBagAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cBagBagEnumEltListParserRuleCall_5_1_1_0 = (RuleCall)cBagAssignment_5_1_1.eContents().get(0);
		private final Assignment cData_exp_listAssignment_5_1_2 = (Assignment)cAlternatives_5_1.eContents().get(2);
		private final RuleCall cData_exp_listDataExprListParserRuleCall_5_1_2_0 = (RuleCall)cData_exp_listAssignment_5_1_2.eContents().get(0);
		private final Group cGroup_5_1_3 = (Group)cAlternatives_5_1.eContents().get(3);
		private final Group cGroup_5_1_3_0 = (Group)cGroup_5_1_3.eContents().get(0);
		private final Assignment cVar_declAssignment_5_1_3_0_0 = (Assignment)cGroup_5_1_3_0.eContents().get(0);
		private final RuleCall cVar_declVarsDeclParserRuleCall_5_1_3_0_0_0 = (RuleCall)cVar_declAssignment_5_1_3_0_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5_1_3_0_1 = (Keyword)cGroup_5_1_3_0.eContents().get(1);
		private final Assignment cData_expAssignment_5_1_3_0_2 = (Assignment)cGroup_5_1_3_0.eContents().get(2);
		private final RuleCall cData_expDataExprParserRuleCall_5_1_3_0_2_0 = (RuleCall)cData_expAssignment_5_1_3_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cIs_round_bracketAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cIs_round_bracketLeftParenthesisKeyword_6_0_0 = (Keyword)cIs_round_bracketAssignment_6_0.eContents().get(0);
		private final Assignment cData_expAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cData_expDataExprParserRuleCall_6_1_0 = (RuleCall)cData_expAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cExclamationMarkKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cData_expAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cData_expDataExprParserRuleCall_7_1_0 = (RuleCall)cData_expAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cHyphenMinusKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cData_expAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cData_expDataExprParserRuleCall_8_1_0 = (RuleCall)cData_expAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cNumberSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cData_expAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cData_expDataExprParserRuleCall_9_1_0 = (RuleCall)cData_expAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Alternatives cAlternatives_10_0 = (Alternatives)cGroup_10.eContents().get(0);
		private final Assignment cIs_forallAssignment_10_0_0 = (Assignment)cAlternatives_10_0.eContents().get(0);
		private final Keyword cIs_forallForallKeyword_10_0_0_0 = (Keyword)cIs_forallAssignment_10_0_0.eContents().get(0);
		private final Assignment cIs_existAssignment_10_0_1 = (Assignment)cAlternatives_10_0.eContents().get(1);
		private final Keyword cIs_existExistsKeyword_10_0_1_0 = (Keyword)cIs_existAssignment_10_0_1.eContents().get(0);
		private final Assignment cIs_lambdaAssignment_10_0_2 = (Assignment)cAlternatives_10_0.eContents().get(2);
		private final Keyword cIs_lambdaLambdaKeyword_10_0_2_0 = (Keyword)cIs_lambdaAssignment_10_0_2.eContents().get(0);
		private final Assignment cVar_listAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cVar_listVarsDeclListParserRuleCall_10_1_0 = (RuleCall)cVar_listAssignment_10_1.eContents().get(0);
		private final Keyword cFullStopKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cData_expAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cData_expDataExprParserRuleCall_10_3_0 = (RuleCall)cData_expAssignment_10_3.eContents().get(0);
		
		//DataExprTerm:
		//	var_id=[VarName] | num=INT | is_true?='true' | is_false?='false' | is_sqaure_bracket?='[' data_list=DataExprList? ']'
		//	| is_curly_bracket?='{' (is_colon?=':' |
		//	-> bag=BagEnumEltList |
		//	-> data_exp_list=DataExprList |
		//	-> (var_decl=VarsDecl '|' data_exp=DataExpr))? '}' | is_round_bracket?='(' data_exp=DataExpr ')' |
		//	'!' data_exp=DataExpr |
		//	'-' data_exp=DataExpr |
		//	'#' data_exp=DataExpr | (is_forall?='forall' | is_exist?='exists' | is_lambda?='lambda') var_list=VarsDeclList '.'
		//	data_exp=DataExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//var_id=[VarName] | num=INT | is_true?='true' | is_false?='false' | is_sqaure_bracket?='[' data_list=DataExprList? ']' |
		//is_curly_bracket?='{' (is_colon?=':' | -> bag=BagEnumEltList | -> data_exp_list=DataExprList | -> (var_decl=VarsDecl
		//'|' data_exp=DataExpr))? '}' | is_round_bracket?='(' data_exp=DataExpr ')' | '!' data_exp=DataExpr | '-'
		//data_exp=DataExpr | '#' data_exp=DataExpr | (is_forall?='forall' | is_exist?='exists' | is_lambda?='lambda')
		//var_list=VarsDeclList '.' data_exp=DataExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var_id=[VarName]
		public Assignment getVar_idAssignment_0() { return cVar_idAssignment_0; }
		
		//[VarName]
		public CrossReference getVar_idVarNameCrossReference_0_0() { return cVar_idVarNameCrossReference_0_0; }
		
		//ID
		public RuleCall getVar_idVarNameIDTerminalRuleCall_0_0_1() { return cVar_idVarNameIDTerminalRuleCall_0_0_1; }
		
		//num=INT
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//INT
		public RuleCall getNumINTTerminalRuleCall_1_0() { return cNumINTTerminalRuleCall_1_0; }
		
		//is_true?='true'
		public Assignment getIs_trueAssignment_2() { return cIs_trueAssignment_2; }
		
		//'true'
		public Keyword getIs_trueTrueKeyword_2_0() { return cIs_trueTrueKeyword_2_0; }
		
		//is_false?='false'
		public Assignment getIs_falseAssignment_3() { return cIs_falseAssignment_3; }
		
		//'false'
		public Keyword getIs_falseFalseKeyword_3_0() { return cIs_falseFalseKeyword_3_0; }
		
		//is_sqaure_bracket?='[' data_list=DataExprList? ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//is_sqaure_bracket?='['
		public Assignment getIs_sqaure_bracketAssignment_4_0() { return cIs_sqaure_bracketAssignment_4_0; }
		
		//'['
		public Keyword getIs_sqaure_bracketLeftSquareBracketKeyword_4_0_0() { return cIs_sqaure_bracketLeftSquareBracketKeyword_4_0_0; }
		
		//data_list=DataExprList?
		public Assignment getData_listAssignment_4_1() { return cData_listAssignment_4_1; }
		
		//DataExprList
		public RuleCall getData_listDataExprListParserRuleCall_4_1_0() { return cData_listDataExprListParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
		
		//is_curly_bracket?='{' (is_colon?=':' | -> bag=BagEnumEltList | -> data_exp_list=DataExprList | -> (var_decl=VarsDecl '|'
		//data_exp=DataExpr))? '}'
		public Group getGroup_5() { return cGroup_5; }
		
		//is_curly_bracket?='{'
		public Assignment getIs_curly_bracketAssignment_5_0() { return cIs_curly_bracketAssignment_5_0; }
		
		//'{'
		public Keyword getIs_curly_bracketLeftCurlyBracketKeyword_5_0_0() { return cIs_curly_bracketLeftCurlyBracketKeyword_5_0_0; }
		
		//(is_colon?=':' | -> bag=BagEnumEltList | -> data_exp_list=DataExprList | -> (var_decl=VarsDecl '|' data_exp=DataExpr))?
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//is_colon?=':'
		public Assignment getIs_colonAssignment_5_1_0() { return cIs_colonAssignment_5_1_0; }
		
		//':'
		public Keyword getIs_colonColonKeyword_5_1_0_0() { return cIs_colonColonKeyword_5_1_0_0; }
		
		//-> bag=BagEnumEltList
		public Assignment getBagAssignment_5_1_1() { return cBagAssignment_5_1_1; }
		
		//BagEnumEltList
		public RuleCall getBagBagEnumEltListParserRuleCall_5_1_1_0() { return cBagBagEnumEltListParserRuleCall_5_1_1_0; }
		
		//-> data_exp_list=DataExprList
		public Assignment getData_exp_listAssignment_5_1_2() { return cData_exp_listAssignment_5_1_2; }
		
		//DataExprList
		public RuleCall getData_exp_listDataExprListParserRuleCall_5_1_2_0() { return cData_exp_listDataExprListParserRuleCall_5_1_2_0; }
		
		//-> (var_decl=VarsDecl '|' data_exp=DataExpr)
		public Group getGroup_5_1_3() { return cGroup_5_1_3; }
		
		//var_decl=VarsDecl '|' data_exp=DataExpr
		public Group getGroup_5_1_3_0() { return cGroup_5_1_3_0; }
		
		//var_decl=VarsDecl
		public Assignment getVar_declAssignment_5_1_3_0_0() { return cVar_declAssignment_5_1_3_0_0; }
		
		//VarsDecl
		public RuleCall getVar_declVarsDeclParserRuleCall_5_1_3_0_0_0() { return cVar_declVarsDeclParserRuleCall_5_1_3_0_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_5_1_3_0_1() { return cVerticalLineKeyword_5_1_3_0_1; }
		
		//data_exp=DataExpr
		public Assignment getData_expAssignment_5_1_3_0_2() { return cData_expAssignment_5_1_3_0_2; }
		
		//DataExpr
		public RuleCall getData_expDataExprParserRuleCall_5_1_3_0_2_0() { return cData_expDataExprParserRuleCall_5_1_3_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
		
		//is_round_bracket?='(' data_exp=DataExpr ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//is_round_bracket?='('
		public Assignment getIs_round_bracketAssignment_6_0() { return cIs_round_bracketAssignment_6_0; }
		
		//'('
		public Keyword getIs_round_bracketLeftParenthesisKeyword_6_0_0() { return cIs_round_bracketLeftParenthesisKeyword_6_0_0; }
		
		//data_exp=DataExpr
		public Assignment getData_expAssignment_6_1() { return cData_expAssignment_6_1; }
		
		//DataExpr
		public RuleCall getData_expDataExprParserRuleCall_6_1_0() { return cData_expDataExprParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
		
		//'!' data_exp=DataExpr
		public Group getGroup_7() { return cGroup_7; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_7_0() { return cExclamationMarkKeyword_7_0; }
		
		//data_exp=DataExpr
		public Assignment getData_expAssignment_7_1() { return cData_expAssignment_7_1; }
		
		//DataExpr
		public RuleCall getData_expDataExprParserRuleCall_7_1_0() { return cData_expDataExprParserRuleCall_7_1_0; }
		
		//'-' data_exp=DataExpr
		public Group getGroup_8() { return cGroup_8; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_8_0() { return cHyphenMinusKeyword_8_0; }
		
		//data_exp=DataExpr
		public Assignment getData_expAssignment_8_1() { return cData_expAssignment_8_1; }
		
		//DataExpr
		public RuleCall getData_expDataExprParserRuleCall_8_1_0() { return cData_expDataExprParserRuleCall_8_1_0; }
		
		//'#' data_exp=DataExpr
		public Group getGroup_9() { return cGroup_9; }
		
		//'#'
		public Keyword getNumberSignKeyword_9_0() { return cNumberSignKeyword_9_0; }
		
		//data_exp=DataExpr
		public Assignment getData_expAssignment_9_1() { return cData_expAssignment_9_1; }
		
		//DataExpr
		public RuleCall getData_expDataExprParserRuleCall_9_1_0() { return cData_expDataExprParserRuleCall_9_1_0; }
		
		//(is_forall?='forall' | is_exist?='exists' | is_lambda?='lambda') var_list=VarsDeclList '.' data_exp=DataExpr
		public Group getGroup_10() { return cGroup_10; }
		
		//is_forall?='forall' | is_exist?='exists' | is_lambda?='lambda'
		public Alternatives getAlternatives_10_0() { return cAlternatives_10_0; }
		
		//is_forall?='forall'
		public Assignment getIs_forallAssignment_10_0_0() { return cIs_forallAssignment_10_0_0; }
		
		//'forall'
		public Keyword getIs_forallForallKeyword_10_0_0_0() { return cIs_forallForallKeyword_10_0_0_0; }
		
		//is_exist?='exists'
		public Assignment getIs_existAssignment_10_0_1() { return cIs_existAssignment_10_0_1; }
		
		//'exists'
		public Keyword getIs_existExistsKeyword_10_0_1_0() { return cIs_existExistsKeyword_10_0_1_0; }
		
		//is_lambda?='lambda'
		public Assignment getIs_lambdaAssignment_10_0_2() { return cIs_lambdaAssignment_10_0_2; }
		
		//'lambda'
		public Keyword getIs_lambdaLambdaKeyword_10_0_2_0() { return cIs_lambdaLambdaKeyword_10_0_2_0; }
		
		//var_list=VarsDeclList
		public Assignment getVar_listAssignment_10_1() { return cVar_listAssignment_10_1; }
		
		//VarsDeclList
		public RuleCall getVar_listVarsDeclListParserRuleCall_10_1_0() { return cVar_listVarsDeclListParserRuleCall_10_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_10_2() { return cFullStopKeyword_10_2; }
		
		//data_exp=DataExpr
		public Assignment getData_expAssignment_10_3() { return cData_expAssignment_10_3; }
		
		//DataExpr
		public RuleCall getData_expDataExprParserRuleCall_10_3_0() { return cData_expDataExprParserRuleCall_10_3_0; }
	}
	public class DataExprListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.DataExprList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cData_expAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cData_expDataExprParserRuleCall_0_0 = (RuleCall)cData_expAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cData_expAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cData_expDataExprParserRuleCall_1_1_0 = (RuleCall)cData_expAssignment_1_1.eContents().get(0);
		
		//DataExprList:
		//	data_exp+=DataExpr (',' data_exp+=DataExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//data_exp+=DataExpr (',' data_exp+=DataExpr)*
		public Group getGroup() { return cGroup; }
		
		//data_exp+=DataExpr
		public Assignment getData_expAssignment_0() { return cData_expAssignment_0; }
		
		//DataExpr
		public RuleCall getData_expDataExprParserRuleCall_0_0() { return cData_expDataExprParserRuleCall_0_0; }
		
		//(',' data_exp+=DataExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//data_exp+=DataExpr
		public Assignment getData_expAssignment_1_1() { return cData_expAssignment_1_1; }
		
		//DataExpr
		public RuleCall getData_expDataExprParserRuleCall_1_1_0() { return cData_expDataExprParserRuleCall_1_1_0; }
	}
	public class EqnDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.EqnDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cCondAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cCondDataExprParserRuleCall_0_0_0_0 = (RuleCall)cCondAssignment_0_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftDataExprParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightDataExprParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EqnDecl:
		//	-> (cond=DataExpr '->')? left=DataExpr '=' right=DataExpr ';';
		@Override public ParserRule getRule() { return rule; }
		
		//-> (cond=DataExpr '->')? left=DataExpr '=' right=DataExpr ';'
		public Group getGroup() { return cGroup; }
		
		//-> (cond=DataExpr '->')?
		public Group getGroup_0() { return cGroup_0; }
		
		//cond=DataExpr '->'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//cond=DataExpr
		public Assignment getCondAssignment_0_0_0() { return cCondAssignment_0_0_0; }
		
		//DataExpr
		public RuleCall getCondDataExprParserRuleCall_0_0_0_0() { return cCondDataExprParserRuleCall_0_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_0_1; }
		
		//left=DataExpr
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//DataExpr
		public RuleCall getLeftDataExprParserRuleCall_1_0() { return cLeftDataExprParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//right=DataExpr
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//DataExpr
		public RuleCall getRightDataExprParserRuleCall_3_0() { return cRightDataExprParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class EqnSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.EqnSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSpecVarSpecParserRuleCall_0_0 = (RuleCall)cSpecAssignment_0.eContents().get(0);
		private final Keyword cEqnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEqnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEqnEqnDeclParserRuleCall_2_0 = (RuleCall)cEqnAssignment_2.eContents().get(0);
		
		//EqnSpec:
		//	spec=VarSpec? 'eqn' eqn+=EqnDecl+;
		@Override public ParserRule getRule() { return rule; }
		
		//spec=VarSpec? 'eqn' eqn+=EqnDecl+
		public Group getGroup() { return cGroup; }
		
		//spec=VarSpec?
		public Assignment getSpecAssignment_0() { return cSpecAssignment_0; }
		
		//VarSpec
		public RuleCall getSpecVarSpecParserRuleCall_0_0() { return cSpecVarSpecParserRuleCall_0_0; }
		
		//'eqn'
		public Keyword getEqnKeyword_1() { return cEqnKeyword_1; }
		
		//eqn+=EqnDecl+
		public Assignment getEqnAssignment_2() { return cEqnAssignment_2; }
		
		//EqnDecl
		public RuleCall getEqnEqnDeclParserRuleCall_2_0() { return cEqnEqnDeclParserRuleCall_2_0; }
	}
	public class MapSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.MapSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdsSortIdsDeclParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//MapSpec:
		//	'map' (ids+=SortIdsDecl ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//'map' (ids+=SortIdsDecl ';')+
		public Group getGroup() { return cGroup; }
		
		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//(ids+=SortIdsDecl ';')+
		public Group getGroup_1() { return cGroup_1; }
		
		//ids+=SortIdsDecl
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }
		
		//SortIdsDecl
		public RuleCall getIdsSortIdsDeclParserRuleCall_1_0_0() { return cIdsSortIdsDeclParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class MultActIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.MultActId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIdsActionNameCrossReference_0_0 = (CrossReference)cIdsAssignment_0.eContents().get(0);
		private final RuleCall cIdsActionNameIDTerminalRuleCall_0_0_1 = (RuleCall)cIdsActionNameCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cIdsActionNameCrossReference_1_1_0 = (CrossReference)cIdsAssignment_1_1.eContents().get(0);
		private final RuleCall cIdsActionNameIDTerminalRuleCall_1_1_0_1 = (RuleCall)cIdsActionNameCrossReference_1_1_0.eContents().get(1);
		
		//MultActId:
		//	ids+=[ActionName] ('|' ids+=[ActionName])*;
		@Override public ParserRule getRule() { return rule; }
		
		//ids+=[ActionName] ('|' ids+=[ActionName])*
		public Group getGroup() { return cGroup; }
		
		//ids+=[ActionName]
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }
		
		//[ActionName]
		public CrossReference getIdsActionNameCrossReference_0_0() { return cIdsActionNameCrossReference_0_0; }
		
		//ID
		public RuleCall getIdsActionNameIDTerminalRuleCall_0_0_1() { return cIdsActionNameIDTerminalRuleCall_0_0_1; }
		
		//('|' ids+=[ActionName])*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//ids+=[ActionName]
		public Assignment getIdsAssignment_1_1() { return cIdsAssignment_1_1; }
		
		//[ActionName]
		public CrossReference getIdsActionNameCrossReference_1_1_0() { return cIdsActionNameCrossReference_1_1_0; }
		
		//ID
		public RuleCall getIdsActionNameIDTerminalRuleCall_1_1_0_1() { return cIdsActionNameIDTerminalRuleCall_1_1_0_1; }
	}
	public class MultActIdListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.MultActIdList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActsMultActIdParserRuleCall_0_0 = (RuleCall)cActsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActsMultActIdParserRuleCall_1_1_0 = (RuleCall)cActsAssignment_1_1.eContents().get(0);
		
		//MultActIdList:
		//	acts+=MultActId (',' acts+=MultActId)*;
		@Override public ParserRule getRule() { return rule; }
		
		//acts+=MultActId (',' acts+=MultActId)*
		public Group getGroup() { return cGroup; }
		
		//acts+=MultActId
		public Assignment getActsAssignment_0() { return cActsAssignment_0; }
		
		//MultActId
		public RuleCall getActsMultActIdParserRuleCall_0_0() { return cActsMultActIdParserRuleCall_0_0; }
		
		//(',' acts+=MultActId)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//acts+=MultActId
		public Assignment getActsAssignment_1_1() { return cActsAssignment_1_1; }
		
		//MultActId
		public RuleCall getActsMultActIdParserRuleCall_1_1_0() { return cActsMultActIdParserRuleCall_1_1_0; }
	}
	public class MultActIdSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.MultActIdSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDataAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDataMultActIdListParserRuleCall_1_0_0 = (RuleCall)cDataAssignment_1_0.eContents().get(0);
		private final Assignment cIs_emptyAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIs_emptyWSTerminalRuleCall_1_1_0 = (RuleCall)cIs_emptyAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MultActIdSet:
		//	'{' (data=MultActIdList | is_empty?=WS) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (data=MultActIdList | is_empty?=WS) '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//data=MultActIdList | is_empty?=WS
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//data=MultActIdList
		public Assignment getDataAssignment_1_0() { return cDataAssignment_1_0; }
		
		//MultActIdList
		public RuleCall getDataMultActIdListParserRuleCall_1_0_0() { return cDataMultActIdListParserRuleCall_1_0_0; }
		
		//is_empty?=WS
		public Assignment getIs_emptyAssignment_1_1() { return cIs_emptyAssignment_1_1; }
		
		//WS
		public RuleCall getIs_emptyWSTerminalRuleCall_1_1_0() { return cIs_emptyWSTerminalRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ProcDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ProcDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdProcNameParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablesVarsDeclListParserRuleCall_1_1_0 = (RuleCall)cVariablesAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightProcExprParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProcDecl:
		//	id=ProcName ('(' variables=VarsDeclList ')')? '=' right=ProcExpr ';';
		@Override public ParserRule getRule() { return rule; }
		
		//id=ProcName ('(' variables=VarsDeclList ')')? '=' right=ProcExpr ';'
		public Group getGroup() { return cGroup; }
		
		//id=ProcName
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ProcName
		public RuleCall getIdProcNameParserRuleCall_0_0() { return cIdProcNameParserRuleCall_0_0; }
		
		//('(' variables=VarsDeclList ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//variables=VarsDeclList
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }
		
		//VarsDeclList
		public RuleCall getVariablesVarsDeclListParserRuleCall_1_1_0() { return cVariablesVarsDeclListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//right=ProcExpr
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//ProcExpr
		public RuleCall getRightProcExprParserRuleCall_3_0() { return cRightProcExprParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ProcSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ProcSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcsProcDeclParserRuleCall_1_0 = (RuleCall)cProcsAssignment_1.eContents().get(0);
		
		//ProcSpec:
		//	'proc' procs+=ProcDecl+;
		@Override public ParserRule getRule() { return rule; }
		
		//'proc' procs+=ProcDecl+
		public Group getGroup() { return cGroup; }
		
		//'proc'
		public Keyword getProcKeyword_0() { return cProcKeyword_0; }
		
		//procs+=ProcDecl+
		public Assignment getProcsAssignment_1() { return cProcsAssignment_1; }
		
		//ProcDecl
		public RuleCall getProcsProcDeclParserRuleCall_1_0() { return cProcsProcDeclParserRuleCall_1_0; }
	}
	public class ProjNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ProjName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ProjName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ProjDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ProjDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdProjNameParserRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSortSortExprParserRuleCall_1_0 = (RuleCall)cSortAssignment_1.eContents().get(0);
		
		//ProjDecl:
		//	(id=ProjName ':')? sort=SortExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//(id=ProjName ':')? sort=SortExpr
		public Group getGroup() { return cGroup; }
		
		//(id=ProjName ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//id=ProjName
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//ProjName
		public RuleCall getIdProjNameParserRuleCall_0_0_0() { return cIdProjNameParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//sort=SortExpr
		public Assignment getSortAssignment_1() { return cSortAssignment_1; }
		
		//SortExpr
		public RuleCall getSortSortExprParserRuleCall_1_0() { return cSortSortExprParserRuleCall_1_0; }
	}
	public class ProjDeclListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ProjDeclList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProjAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProjProjDeclParserRuleCall_0_0 = (RuleCall)cProjAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cProfAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cProfProjDeclParserRuleCall_1_1_0 = (RuleCall)cProfAssignment_1_1.eContents().get(0);
		
		//ProjDeclList:
		//	proj+=ProjDecl (',' prof+=ProjDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//proj+=ProjDecl (',' prof+=ProjDecl)*
		public Group getGroup() { return cGroup; }
		
		//proj+=ProjDecl
		public Assignment getProjAssignment_0() { return cProjAssignment_0; }
		
		//ProjDecl
		public RuleCall getProjProjDeclParserRuleCall_0_0() { return cProjProjDeclParserRuleCall_0_0; }
		
		//(',' prof+=ProjDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//prof+=ProjDecl
		public Assignment getProfAssignment_1_1() { return cProfAssignment_1_1; }
		
		//ProjDecl
		public RuleCall getProfProjDeclParserRuleCall_1_1_0() { return cProfProjDeclParserRuleCall_1_1_0; }
	}
	public class ProcExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ProcExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftProcExprTermParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Assignment cIs_plusAssignment_1_0_0_0 = (Assignment)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cIs_plusPlusSignKeyword_1_0_0_0_0 = (Keyword)cIs_plusAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cIs_parAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cIs_parVerticalLineVerticalLineKeyword_1_0_0_1_0 = (Keyword)cIs_parAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cIs_par_rightAssignment_1_0_0_2 = (Assignment)cAlternatives_1_0_0.eContents().get(2);
		private final Keyword cIs_par_right_Keyword_1_0_0_2_0 = (Keyword)cIs_par_rightAssignment_1_0_0_2.eContents().get(0);
		private final Assignment cIs_left_shistAssignment_1_0_0_3 = (Assignment)cAlternatives_1_0_0.eContents().get(3);
		private final Keyword cIs_left_shistLessThanSignLessThanSignKeyword_1_0_0_3_0 = (Keyword)cIs_left_shistAssignment_1_0_0_3.eContents().get(0);
		private final Assignment cIs_pointAssignment_1_0_0_4 = (Assignment)cAlternatives_1_0_0.eContents().get(4);
		private final Keyword cIs_pointFullStopKeyword_1_0_0_4_0 = (Keyword)cIs_pointAssignment_1_0_0_4.eContents().get(0);
		private final Assignment cIs_orAssignment_1_0_0_5 = (Assignment)cAlternatives_1_0_0.eContents().get(5);
		private final Keyword cIs_orVerticalLineKeyword_1_0_0_5_0 = (Keyword)cIs_orAssignment_1_0_0_5.eContents().get(0);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightProcExprParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIs_atAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cIs_atCommercialAtKeyword_1_1_0_0 = (Keyword)cIs_atAssignment_1_1_0.eContents().get(0);
		private final Assignment cUnit_rightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cUnit_rightDataExprUnitParserRuleCall_1_1_1_0 = (RuleCall)cUnit_rightAssignment_1_1_1.eContents().get(0);
		
		//ProcExpr:
		//	left=ProcExprTerm ((is_plus?='+' | is_par?='||' | is_par_right?='||_' | is_left_shist?='<<' | is_point?='.' |
		//	is_or?='|') right=ProcExpr | is_at?='@' unit_right=DataExprUnit);
		@Override public ParserRule getRule() { return rule; }
		
		//left=ProcExprTerm ((is_plus?='+' | is_par?='||' | is_par_right?='||_' | is_left_shist?='<<' | is_point?='.' |
		//is_or?='|') right=ProcExpr | is_at?='@' unit_right=DataExprUnit)
		public Group getGroup() { return cGroup; }
		
		//left=ProcExprTerm
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ProcExprTerm
		public RuleCall getLeftProcExprTermParserRuleCall_0_0() { return cLeftProcExprTermParserRuleCall_0_0; }
		
		//(is_plus?='+' | is_par?='||' | is_par_right?='||_' | is_left_shist?='<<' | is_point?='.' | is_or?='|') right=ProcExpr |
		//is_at?='@' unit_right=DataExprUnit
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(is_plus?='+' | is_par?='||' | is_par_right?='||_' | is_left_shist?='<<' | is_point?='.' | is_or?='|') right=ProcExpr
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//is_plus?='+' | is_par?='||' | is_par_right?='||_' | is_left_shist?='<<' | is_point?='.' | is_or?='|'
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//is_plus?='+'
		public Assignment getIs_plusAssignment_1_0_0_0() { return cIs_plusAssignment_1_0_0_0; }
		
		//'+'
		public Keyword getIs_plusPlusSignKeyword_1_0_0_0_0() { return cIs_plusPlusSignKeyword_1_0_0_0_0; }
		
		//is_par?='||'
		public Assignment getIs_parAssignment_1_0_0_1() { return cIs_parAssignment_1_0_0_1; }
		
		//'||'
		public Keyword getIs_parVerticalLineVerticalLineKeyword_1_0_0_1_0() { return cIs_parVerticalLineVerticalLineKeyword_1_0_0_1_0; }
		
		//is_par_right?='||_'
		public Assignment getIs_par_rightAssignment_1_0_0_2() { return cIs_par_rightAssignment_1_0_0_2; }
		
		//'||_'
		public Keyword getIs_par_right_Keyword_1_0_0_2_0() { return cIs_par_right_Keyword_1_0_0_2_0; }
		
		//is_left_shist?='<<'
		public Assignment getIs_left_shistAssignment_1_0_0_3() { return cIs_left_shistAssignment_1_0_0_3; }
		
		//'<<'
		public Keyword getIs_left_shistLessThanSignLessThanSignKeyword_1_0_0_3_0() { return cIs_left_shistLessThanSignLessThanSignKeyword_1_0_0_3_0; }
		
		//is_point?='.'
		public Assignment getIs_pointAssignment_1_0_0_4() { return cIs_pointAssignment_1_0_0_4; }
		
		//'.'
		public Keyword getIs_pointFullStopKeyword_1_0_0_4_0() { return cIs_pointFullStopKeyword_1_0_0_4_0; }
		
		//is_or?='|'
		public Assignment getIs_orAssignment_1_0_0_5() { return cIs_orAssignment_1_0_0_5; }
		
		//'|'
		public Keyword getIs_orVerticalLineKeyword_1_0_0_5_0() { return cIs_orVerticalLineKeyword_1_0_0_5_0; }
		
		//right=ProcExpr
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }
		
		//ProcExpr
		public RuleCall getRightProcExprParserRuleCall_1_0_1_0() { return cRightProcExprParserRuleCall_1_0_1_0; }
		
		//is_at?='@' unit_right=DataExprUnit
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//is_at?='@'
		public Assignment getIs_atAssignment_1_1_0() { return cIs_atAssignment_1_1_0; }
		
		//'@'
		public Keyword getIs_atCommercialAtKeyword_1_1_0_0() { return cIs_atCommercialAtKeyword_1_1_0_0; }
		
		//unit_right=DataExprUnit
		public Assignment getUnit_rightAssignment_1_1_1() { return cUnit_rightAssignment_1_1_1; }
		
		//DataExprUnit
		public RuleCall getUnit_rightDataExprUnitParserRuleCall_1_1_1_0() { return cUnit_rightDataExprUnitParserRuleCall_1_1_1_0; }
	}
	public class ProcNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ProcName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ProcName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ProcExprTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.ProcExprTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cActionActionParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cProc_idAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cProc_idProcNameCrossReference_1_0_0_0 = (CrossReference)cProc_idAssignment_1_0_0.eContents().get(0);
		private final RuleCall cProc_idProcNameIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cProc_idProcNameCrossReference_1_0_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cAssAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cAssAssignmentListParserRuleCall_1_0_2_0 = (RuleCall)cAssAssignment_1_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cMap_idAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final CrossReference cMap_idSortNameCrossReference_2_0_0_0 = (CrossReference)cMap_idAssignment_2_0_0.eContents().get(0);
		private final RuleCall cMap_idSortNameIDTerminalRuleCall_2_0_0_0_1 = (RuleCall)cMap_idSortNameCrossReference_2_0_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cAssAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cAssAssignmentListParserRuleCall_2_0_2_0 = (RuleCall)cAssAssignment_2_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cIs_deltaAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cIs_deltaDeltaKeyword_3_0 = (Keyword)cIs_deltaAssignment_3.eContents().get(0);
		private final Assignment cIs_tauAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cIs_tauTauKeyword_4_0 = (Keyword)cIs_tauAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cIs_blockAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cIs_blockBlockKeyword_5_0_0 = (Keyword)cIs_blockAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAct_setAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAct_setActIdSetParserRuleCall_5_2_0 = (RuleCall)cAct_setAssignment_5_2.eContents().get(0);
		private final Keyword cCommaKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cProc_expAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cProc_expProcExprParserRuleCall_5_4_0 = (RuleCall)cProc_expAssignment_5_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cIs_allowAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cIs_allowAllowKeyword_6_0_0 = (Keyword)cIs_allowAssignment_6_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMulti_setAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMulti_setMultActIdSetParserRuleCall_6_2_0 = (RuleCall)cMulti_setAssignment_6_2.eContents().get(0);
		private final Keyword cCommaKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cProc_expAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cProc_expProcExprParserRuleCall_6_4_0 = (RuleCall)cProc_expAssignment_6_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cIs_hideAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cIs_hideHideKeyword_7_0_0 = (Keyword)cIs_hideAssignment_7_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cAct_setAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAct_setActIdSetParserRuleCall_7_2_0 = (RuleCall)cAct_setAssignment_7_2.eContents().get(0);
		private final Keyword cCommaKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cProc_expAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cProc_expProcExprParserRuleCall_7_4_0 = (RuleCall)cProc_expAssignment_7_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cIs_grpAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cIs_grpLeftParenthesisKeyword_8_0_0 = (Keyword)cIs_grpAssignment_8_0.eContents().get(0);
		private final Assignment cProc_expAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cProc_expProcExprParserRuleCall_8_1_0 = (RuleCall)cProc_expAssignment_8_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cIs_sumAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cIs_sumSumKeyword_9_0_0 = (Keyword)cIs_sumAssignment_9_0.eContents().get(0);
		private final Assignment cVariablesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cVariablesVarsDeclListParserRuleCall_9_1_0 = (RuleCall)cVariablesAssignment_9_1.eContents().get(0);
		private final Keyword cFullStopKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cProc_expAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cProc_expProcExprParserRuleCall_9_3_0 = (RuleCall)cProc_expAssignment_9_3.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cDataExprUnitParserRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cProc_expAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cProc_expProcExprParserRuleCall_10_2_0 = (RuleCall)cProc_expAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cLessThanSignGreaterThanSignKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cProc_exp_otherAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cProc_exp_otherProcExprParserRuleCall_10_3_1_0 = (RuleCall)cProc_exp_otherAssignment_10_3_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cDistKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final RuleCall cVarsDeclListParserRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cDataAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cDataDataExprParserRuleCall_11_3_0 = (RuleCall)cDataAssignment_11_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Keyword cFullStopKeyword_11_5 = (Keyword)cGroup_11.eContents().get(5);
		private final Assignment cProc_expAssignment_11_6 = (Assignment)cGroup_11.eContents().get(6);
		private final RuleCall cProc_expProcExprParserRuleCall_11_6_0 = (RuleCall)cProc_expAssignment_11_6.eContents().get(0);
		
		//ProcExprTerm:
		//	-> action=Action |
		//	-> (proc_id=[ProcName] '(' ass=AssignmentList? ')') |
		//	-> (map_id=[SortName] '(' ass=AssignmentList? ')') | is_delta?='delta' | is_tau?='tau' | is_block?='block' '('
		//	act_set=ActIdSet ',' proc_exp=ProcExpr ')' | is_allow?='allow' '(' multi_set=MultActIdSet ',' proc_exp=ProcExpr ')' |
		//	is_hide?='hide' '(' act_set=ActIdSet ',' proc_exp=ProcExpr ')' |
		//	//is_rename?='rename' '(' ren_set=RenExprSet ',' proc_exp=ProcExpr ')' |
		//	//is_comm?='comm'     '(' comm_set=CommExprSet ',' proc_exp=ProcExpr ')' |
		//	-> is_grp?='(' proc_exp=ProcExpr ')' | is_sum?='sum' variables=VarsDeclList '.' proc_exp=ProcExpr | DataExprUnit '->'
		//	proc_exp=ProcExpr ('<>' proc_exp_other=ProcExpr)? |
		//	'dist' VarsDeclList '[' data=DataExpr ']' '.' proc_exp=ProcExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//-> action=Action | -> (proc_id=[ProcName] '(' ass=AssignmentList? ')') | -> (map_id=[SortName] '(' ass=AssignmentList?
		//')') | is_delta?='delta' | is_tau?='tau' | is_block?='block' '(' act_set=ActIdSet ',' proc_exp=ProcExpr ')' |
		//is_allow?='allow' '(' multi_set=MultActIdSet ',' proc_exp=ProcExpr ')' | is_hide?='hide' '(' act_set=ActIdSet ','
		//proc_exp=ProcExpr ')' | //is_rename?='rename' '(' ren_set=RenExprSet ',' proc_exp=ProcExpr ')' |
		////is_comm?='comm'     '(' comm_set=CommExprSet ',' proc_exp=ProcExpr ')' |
		//-> is_grp?='(' proc_exp=ProcExpr ')' | is_sum?='sum' variables=VarsDeclList '.' proc_exp=ProcExpr | DataExprUnit '->'
		//proc_exp=ProcExpr ('<>' proc_exp_other=ProcExpr)? | 'dist' VarsDeclList '[' data=DataExpr ']' '.' proc_exp=ProcExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//-> action=Action
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_0_0() { return cActionActionParserRuleCall_0_0; }
		
		//-> (proc_id=[ProcName] '(' ass=AssignmentList? ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//proc_id=[ProcName] '(' ass=AssignmentList? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//proc_id=[ProcName]
		public Assignment getProc_idAssignment_1_0_0() { return cProc_idAssignment_1_0_0; }
		
		//[ProcName]
		public CrossReference getProc_idProcNameCrossReference_1_0_0_0() { return cProc_idProcNameCrossReference_1_0_0_0; }
		
		//ID
		public RuleCall getProc_idProcNameIDTerminalRuleCall_1_0_0_0_1() { return cProc_idProcNameIDTerminalRuleCall_1_0_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }
		
		//ass=AssignmentList?
		public Assignment getAssAssignment_1_0_2() { return cAssAssignment_1_0_2; }
		
		//AssignmentList
		public RuleCall getAssAssignmentListParserRuleCall_1_0_2_0() { return cAssAssignmentListParserRuleCall_1_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }
		
		//-> (map_id=[SortName] '(' ass=AssignmentList? ')')
		public Group getGroup_2() { return cGroup_2; }
		
		//map_id=[SortName] '(' ass=AssignmentList? ')'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//map_id=[SortName]
		public Assignment getMap_idAssignment_2_0_0() { return cMap_idAssignment_2_0_0; }
		
		//[SortName]
		public CrossReference getMap_idSortNameCrossReference_2_0_0_0() { return cMap_idSortNameCrossReference_2_0_0_0; }
		
		//ID
		public RuleCall getMap_idSortNameIDTerminalRuleCall_2_0_0_0_1() { return cMap_idSortNameIDTerminalRuleCall_2_0_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_1() { return cLeftParenthesisKeyword_2_0_1; }
		
		//ass=AssignmentList?
		public Assignment getAssAssignment_2_0_2() { return cAssAssignment_2_0_2; }
		
		//AssignmentList
		public RuleCall getAssAssignmentListParserRuleCall_2_0_2_0() { return cAssAssignmentListParserRuleCall_2_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }
		
		//is_delta?='delta'
		public Assignment getIs_deltaAssignment_3() { return cIs_deltaAssignment_3; }
		
		//'delta'
		public Keyword getIs_deltaDeltaKeyword_3_0() { return cIs_deltaDeltaKeyword_3_0; }
		
		//is_tau?='tau'
		public Assignment getIs_tauAssignment_4() { return cIs_tauAssignment_4; }
		
		//'tau'
		public Keyword getIs_tauTauKeyword_4_0() { return cIs_tauTauKeyword_4_0; }
		
		//is_block?='block' '(' act_set=ActIdSet ',' proc_exp=ProcExpr ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//is_block?='block'
		public Assignment getIs_blockAssignment_5_0() { return cIs_blockAssignment_5_0; }
		
		//'block'
		public Keyword getIs_blockBlockKeyword_5_0_0() { return cIs_blockBlockKeyword_5_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//act_set=ActIdSet
		public Assignment getAct_setAssignment_5_2() { return cAct_setAssignment_5_2; }
		
		//ActIdSet
		public RuleCall getAct_setActIdSetParserRuleCall_5_2_0() { return cAct_setActIdSetParserRuleCall_5_2_0; }
		
		//','
		public Keyword getCommaKeyword_5_3() { return cCommaKeyword_5_3; }
		
		//proc_exp=ProcExpr
		public Assignment getProc_expAssignment_5_4() { return cProc_expAssignment_5_4; }
		
		//ProcExpr
		public RuleCall getProc_expProcExprParserRuleCall_5_4_0() { return cProc_expProcExprParserRuleCall_5_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_5() { return cRightParenthesisKeyword_5_5; }
		
		//is_allow?='allow' '(' multi_set=MultActIdSet ',' proc_exp=ProcExpr ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//is_allow?='allow'
		public Assignment getIs_allowAssignment_6_0() { return cIs_allowAssignment_6_0; }
		
		//'allow'
		public Keyword getIs_allowAllowKeyword_6_0_0() { return cIs_allowAllowKeyword_6_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//multi_set=MultActIdSet
		public Assignment getMulti_setAssignment_6_2() { return cMulti_setAssignment_6_2; }
		
		//MultActIdSet
		public RuleCall getMulti_setMultActIdSetParserRuleCall_6_2_0() { return cMulti_setMultActIdSetParserRuleCall_6_2_0; }
		
		//','
		public Keyword getCommaKeyword_6_3() { return cCommaKeyword_6_3; }
		
		//proc_exp=ProcExpr
		public Assignment getProc_expAssignment_6_4() { return cProc_expAssignment_6_4; }
		
		//ProcExpr
		public RuleCall getProc_expProcExprParserRuleCall_6_4_0() { return cProc_expProcExprParserRuleCall_6_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_5() { return cRightParenthesisKeyword_6_5; }
		
		//is_hide?='hide' '(' act_set=ActIdSet ',' proc_exp=ProcExpr ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//is_hide?='hide'
		public Assignment getIs_hideAssignment_7_0() { return cIs_hideAssignment_7_0; }
		
		//'hide'
		public Keyword getIs_hideHideKeyword_7_0_0() { return cIs_hideHideKeyword_7_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//act_set=ActIdSet
		public Assignment getAct_setAssignment_7_2() { return cAct_setAssignment_7_2; }
		
		//ActIdSet
		public RuleCall getAct_setActIdSetParserRuleCall_7_2_0() { return cAct_setActIdSetParserRuleCall_7_2_0; }
		
		//','
		public Keyword getCommaKeyword_7_3() { return cCommaKeyword_7_3; }
		
		//proc_exp=ProcExpr
		public Assignment getProc_expAssignment_7_4() { return cProc_expAssignment_7_4; }
		
		//ProcExpr
		public RuleCall getProc_expProcExprParserRuleCall_7_4_0() { return cProc_expProcExprParserRuleCall_7_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_5() { return cRightParenthesisKeyword_7_5; }
		
		////is_rename?='rename' '(' ren_set=RenExprSet ',' proc_exp=ProcExpr ')' |
		////is_comm?='comm'     '(' comm_set=CommExprSet ',' proc_exp=ProcExpr ')' |
		//-> is_grp?='(' proc_exp=ProcExpr ')'
		public Group getGroup_8() { return cGroup_8; }
		
		////is_rename?='rename' '(' ren_set=RenExprSet ',' proc_exp=ProcExpr ')' |
		////is_comm?='comm'     '(' comm_set=CommExprSet ',' proc_exp=ProcExpr ')' |
		//-> is_grp?='('
		public Assignment getIs_grpAssignment_8_0() { return cIs_grpAssignment_8_0; }
		
		//'('
		public Keyword getIs_grpLeftParenthesisKeyword_8_0_0() { return cIs_grpLeftParenthesisKeyword_8_0_0; }
		
		//proc_exp=ProcExpr
		public Assignment getProc_expAssignment_8_1() { return cProc_expAssignment_8_1; }
		
		//ProcExpr
		public RuleCall getProc_expProcExprParserRuleCall_8_1_0() { return cProc_expProcExprParserRuleCall_8_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_2() { return cRightParenthesisKeyword_8_2; }
		
		//is_sum?='sum' variables=VarsDeclList '.' proc_exp=ProcExpr
		public Group getGroup_9() { return cGroup_9; }
		
		//is_sum?='sum'
		public Assignment getIs_sumAssignment_9_0() { return cIs_sumAssignment_9_0; }
		
		//'sum'
		public Keyword getIs_sumSumKeyword_9_0_0() { return cIs_sumSumKeyword_9_0_0; }
		
		//variables=VarsDeclList
		public Assignment getVariablesAssignment_9_1() { return cVariablesAssignment_9_1; }
		
		//VarsDeclList
		public RuleCall getVariablesVarsDeclListParserRuleCall_9_1_0() { return cVariablesVarsDeclListParserRuleCall_9_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_9_2() { return cFullStopKeyword_9_2; }
		
		//proc_exp=ProcExpr
		public Assignment getProc_expAssignment_9_3() { return cProc_expAssignment_9_3; }
		
		//ProcExpr
		public RuleCall getProc_expProcExprParserRuleCall_9_3_0() { return cProc_expProcExprParserRuleCall_9_3_0; }
		
		//DataExprUnit '->' proc_exp=ProcExpr ('<>' proc_exp_other=ProcExpr)?
		public Group getGroup_10() { return cGroup_10; }
		
		//DataExprUnit
		public RuleCall getDataExprUnitParserRuleCall_10_0() { return cDataExprUnitParserRuleCall_10_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_10_1() { return cHyphenMinusGreaterThanSignKeyword_10_1; }
		
		//proc_exp=ProcExpr
		public Assignment getProc_expAssignment_10_2() { return cProc_expAssignment_10_2; }
		
		//ProcExpr
		public RuleCall getProc_expProcExprParserRuleCall_10_2_0() { return cProc_expProcExprParserRuleCall_10_2_0; }
		
		//('<>' proc_exp_other=ProcExpr)?
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_10_3_0() { return cLessThanSignGreaterThanSignKeyword_10_3_0; }
		
		//proc_exp_other=ProcExpr
		public Assignment getProc_exp_otherAssignment_10_3_1() { return cProc_exp_otherAssignment_10_3_1; }
		
		//ProcExpr
		public RuleCall getProc_exp_otherProcExprParserRuleCall_10_3_1_0() { return cProc_exp_otherProcExprParserRuleCall_10_3_1_0; }
		
		//'dist' VarsDeclList '[' data=DataExpr ']' '.' proc_exp=ProcExpr
		public Group getGroup_11() { return cGroup_11; }
		
		//'dist'
		public Keyword getDistKeyword_11_0() { return cDistKeyword_11_0; }
		
		//VarsDeclList
		public RuleCall getVarsDeclListParserRuleCall_11_1() { return cVarsDeclListParserRuleCall_11_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_11_2() { return cLeftSquareBracketKeyword_11_2; }
		
		//data=DataExpr
		public Assignment getDataAssignment_11_3() { return cDataAssignment_11_3; }
		
		//DataExpr
		public RuleCall getDataDataExprParserRuleCall_11_3_0() { return cDataDataExprParserRuleCall_11_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11_4() { return cRightSquareBracketKeyword_11_4; }
		
		//'.'
		public Keyword getFullStopKeyword_11_5() { return cFullStopKeyword_11_5; }
		
		//proc_exp=ProcExpr
		public Assignment getProc_expAssignment_11_6() { return cProc_expAssignment_11_6; }
		
		//ProcExpr
		public RuleCall getProc_expProcExprParserRuleCall_11_6_0() { return cProc_expProcExprParserRuleCall_11_6_0; }
	}
	public class SortNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.SortName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SortName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SortIdListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.SortIdList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cId_listAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cId_listSortNameParserRuleCall_0_0 = (RuleCall)cId_listAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cId_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cId_listSortNameParserRuleCall_1_1_0 = (RuleCall)cId_listAssignment_1_1.eContents().get(0);
		
		//SortIdList:
		//	id_list+=SortName (',' id_list+=SortName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//id_list+=SortName (',' id_list+=SortName)*
		public Group getGroup() { return cGroup; }
		
		//id_list+=SortName
		public Assignment getId_listAssignment_0() { return cId_listAssignment_0; }
		
		//SortName
		public RuleCall getId_listSortNameParserRuleCall_0_0() { return cId_listSortNameParserRuleCall_0_0; }
		
		//(',' id_list+=SortName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//id_list+=SortName
		public Assignment getId_listAssignment_1_1() { return cId_listAssignment_1_1; }
		
		//SortName
		public RuleCall getId_listSortNameParserRuleCall_1_1_0() { return cId_listSortNameParserRuleCall_1_1_0; }
	}
	public class SortIdsDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.SortIdsDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdSortIdListParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSortSortExprParserRuleCall_2_0 = (RuleCall)cSortAssignment_2.eContents().get(0);
		
		//SortIdsDecl:
		//	id=SortIdList ':' sort=SortExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//id=SortIdList ':' sort=SortExpr
		public Group getGroup() { return cGroup; }
		
		//id=SortIdList
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//SortIdList
		public RuleCall getIdSortIdListParserRuleCall_0_0() { return cIdSortIdListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//sort=SortExpr
		public Assignment getSortAssignment_2() { return cSortAssignment_2; }
		
		//SortExpr
		public RuleCall getSortSortExprParserRuleCall_2_0() { return cSortSortExprParserRuleCall_2_0; }
	}
	public class SortExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.SortExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftSortExprTermParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightSortExprParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//SortExpr:
		//	left=SortExprTerm ('->' | '#') right=SortExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//left=SortExprTerm ('->' | '#') right=SortExpr
		public Group getGroup() { return cGroup; }
		
		//left=SortExprTerm
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//SortExprTerm
		public RuleCall getLeftSortExprTermParserRuleCall_0_0() { return cLeftSortExprTermParserRuleCall_0_0; }
		
		//'->' | '#'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_1() { return cNumberSignKeyword_1_1; }
		
		//right=SortExpr
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//SortExpr
		public RuleCall getRightSortExprParserRuleCall_2_0() { return cRightSortExprParserRuleCall_2_0; }
	}
	public class SortExprTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.SortExprTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIs_boolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cIs_boolBoolKeyword_0_0 = (Keyword)cIs_boolAssignment_0.eContents().get(0);
		private final Assignment cIs_posAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIs_posPosKeyword_1_0 = (Keyword)cIs_posAssignment_1.eContents().get(0);
		private final Assignment cIs_natAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cIs_natNatKeyword_2_0 = (Keyword)cIs_natAssignment_2.eContents().get(0);
		private final Assignment cIs_intAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cIs_intIntKeyword_3_0 = (Keyword)cIs_intAssignment_3.eContents().get(0);
		private final Assignment cIs_realAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cIs_realRealKeyword_4_0 = (Keyword)cIs_realAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Assignment cIs_listAssignment_5_0_0 = (Assignment)cAlternatives_5_0.eContents().get(0);
		private final Keyword cIs_listListKeyword_5_0_0_0 = (Keyword)cIs_listAssignment_5_0_0.eContents().get(0);
		private final Assignment cSetAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final Keyword cSetSetKeyword_5_0_1_0 = (Keyword)cSetAssignment_5_0_1.eContents().get(0);
		private final Assignment cBagAssignment_5_0_2 = (Assignment)cAlternatives_5_0.eContents().get(2);
		private final Keyword cBagBagKeyword_5_0_2_0 = (Keyword)cBagAssignment_5_0_2.eContents().get(0);
		private final Assignment cFsetAssignment_5_0_3 = (Assignment)cAlternatives_5_0.eContents().get(3);
		private final Keyword cFsetFSetKeyword_5_0_3_0 = (Keyword)cFsetAssignment_5_0_3.eContents().get(0);
		private final Assignment cFbagAssignment_5_0_4 = (Assignment)cAlternatives_5_0.eContents().get(4);
		private final Keyword cFbagFBagKeyword_5_0_4_0 = (Keyword)cFbagAssignment_5_0_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExpAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpSortExprParserRuleCall_5_2_0 = (RuleCall)cExpAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cIdAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final CrossReference cIdSortNameCrossReference_6_0 = (CrossReference)cIdAssignment_6.eContents().get(0);
		private final RuleCall cIdSortNameIDTerminalRuleCall_6_0_1 = (RuleCall)cIdSortNameCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExpAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpSortExprParserRuleCall_7_1_0 = (RuleCall)cExpAssignment_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cStructKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cConstAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cConstConstrDeclListParserRuleCall_8_1_0 = (RuleCall)cConstAssignment_8_1.eContents().get(0);
		
		//SortExprTerm:
		//	is_bool?='Bool' | is_pos?='Pos' | is_nat?='Nat' | is_int?='Int' | is_real?='Real' | (is_list?='List' | set?='Set' |
		//	bag?='Bag' | fset?='FSet' | fbag?='FBag') '(' exp=SortExpr ')'
		//	| id=[SortName] |
		//	'(' exp=SortExpr ')' |
		//	'struct' const=ConstrDeclList;
		@Override public ParserRule getRule() { return rule; }
		
		//is_bool?='Bool' | is_pos?='Pos' | is_nat?='Nat' | is_int?='Int' | is_real?='Real' | (is_list?='List' | set?='Set' |
		//bag?='Bag' | fset?='FSet' | fbag?='FBag') '(' exp=SortExpr ')' | id=[SortName] | '(' exp=SortExpr ')' | 'struct'
		//const=ConstrDeclList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//is_bool?='Bool'
		public Assignment getIs_boolAssignment_0() { return cIs_boolAssignment_0; }
		
		//'Bool'
		public Keyword getIs_boolBoolKeyword_0_0() { return cIs_boolBoolKeyword_0_0; }
		
		//is_pos?='Pos'
		public Assignment getIs_posAssignment_1() { return cIs_posAssignment_1; }
		
		//'Pos'
		public Keyword getIs_posPosKeyword_1_0() { return cIs_posPosKeyword_1_0; }
		
		//is_nat?='Nat'
		public Assignment getIs_natAssignment_2() { return cIs_natAssignment_2; }
		
		//'Nat'
		public Keyword getIs_natNatKeyword_2_0() { return cIs_natNatKeyword_2_0; }
		
		//is_int?='Int'
		public Assignment getIs_intAssignment_3() { return cIs_intAssignment_3; }
		
		//'Int'
		public Keyword getIs_intIntKeyword_3_0() { return cIs_intIntKeyword_3_0; }
		
		//is_real?='Real'
		public Assignment getIs_realAssignment_4() { return cIs_realAssignment_4; }
		
		//'Real'
		public Keyword getIs_realRealKeyword_4_0() { return cIs_realRealKeyword_4_0; }
		
		//(is_list?='List' | set?='Set' | bag?='Bag' | fset?='FSet' | fbag?='FBag') '(' exp=SortExpr ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//is_list?='List' | set?='Set' | bag?='Bag' | fset?='FSet' | fbag?='FBag'
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }
		
		//is_list?='List'
		public Assignment getIs_listAssignment_5_0_0() { return cIs_listAssignment_5_0_0; }
		
		//'List'
		public Keyword getIs_listListKeyword_5_0_0_0() { return cIs_listListKeyword_5_0_0_0; }
		
		//set?='Set'
		public Assignment getSetAssignment_5_0_1() { return cSetAssignment_5_0_1; }
		
		//'Set'
		public Keyword getSetSetKeyword_5_0_1_0() { return cSetSetKeyword_5_0_1_0; }
		
		//bag?='Bag'
		public Assignment getBagAssignment_5_0_2() { return cBagAssignment_5_0_2; }
		
		//'Bag'
		public Keyword getBagBagKeyword_5_0_2_0() { return cBagBagKeyword_5_0_2_0; }
		
		//fset?='FSet'
		public Assignment getFsetAssignment_5_0_3() { return cFsetAssignment_5_0_3; }
		
		//'FSet'
		public Keyword getFsetFSetKeyword_5_0_3_0() { return cFsetFSetKeyword_5_0_3_0; }
		
		//fbag?='FBag'
		public Assignment getFbagAssignment_5_0_4() { return cFbagAssignment_5_0_4; }
		
		//'FBag'
		public Keyword getFbagFBagKeyword_5_0_4_0() { return cFbagFBagKeyword_5_0_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//exp=SortExpr
		public Assignment getExpAssignment_5_2() { return cExpAssignment_5_2; }
		
		//SortExpr
		public RuleCall getExpSortExprParserRuleCall_5_2_0() { return cExpSortExprParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//id=[SortName]
		public Assignment getIdAssignment_6() { return cIdAssignment_6; }
		
		//[SortName]
		public CrossReference getIdSortNameCrossReference_6_0() { return cIdSortNameCrossReference_6_0; }
		
		//ID
		public RuleCall getIdSortNameIDTerminalRuleCall_6_0_1() { return cIdSortNameIDTerminalRuleCall_6_0_1; }
		
		//'(' exp=SortExpr ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//exp=SortExpr
		public Assignment getExpAssignment_7_1() { return cExpAssignment_7_1; }
		
		//SortExpr
		public RuleCall getExpSortExprParserRuleCall_7_1_0() { return cExpSortExprParserRuleCall_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
		
		//'struct' const=ConstrDeclList
		public Group getGroup_8() { return cGroup_8; }
		
		//'struct'
		public Keyword getStructKeyword_8_0() { return cStructKeyword_8_0; }
		
		//const=ConstrDeclList
		public Assignment getConstAssignment_8_1() { return cConstAssignment_8_1; }
		
		//ConstrDeclList
		public RuleCall getConstConstrDeclListParserRuleCall_8_1_0() { return cConstConstrDeclListParserRuleCall_8_1_0; }
	}
	public class SortDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.SortDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdSortNameParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSortSortExprParserRuleCall_2_0 = (RuleCall)cSortAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SortDecl:
		//	id=SortName '=' sort=SortExpr ';';
		@Override public ParserRule getRule() { return rule; }
		
		////id_list+=IdList ';' |
		//id=SortName '=' sort=SortExpr ';'
		public Group getGroup() { return cGroup; }
		
		////id_list+=IdList ';' |
		//id=SortName
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//SortName
		public RuleCall getIdSortNameParserRuleCall_0_0() { return cIdSortNameParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//sort=SortExpr
		public Assignment getSortAssignment_2() { return cSortAssignment_2; }
		
		//SortExpr
		public RuleCall getSortSortExprParserRuleCall_2_0() { return cSortSortExprParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class SortSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.SortSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSortsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSortsSortDeclParserRuleCall_1_0 = (RuleCall)cSortsAssignment_1.eContents().get(0);
		
		//SortSpec:
		//	'sort' sorts+=SortDecl+;
		@Override public ParserRule getRule() { return rule; }
		
		//'sort' sorts+=SortDecl+
		public Group getGroup() { return cGroup; }
		
		//'sort'
		public Keyword getSortKeyword_0() { return cSortKeyword_0; }
		
		//sorts+=SortDecl+
		public Assignment getSortsAssignment_1() { return cSortsAssignment_1; }
		
		//SortDecl
		public RuleCall getSortsSortDeclParserRuleCall_1_0() { return cSortsSortDeclParserRuleCall_1_0; }
	}
	public class GlobVarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.GlobVarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVars_listAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVars_listVarsDeclListParserRuleCall_1_0_0 = (RuleCall)cVars_listAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//GlobVarSpec:
		//	'glob' (vars_list+=VarsDeclList ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//'glob' (vars_list+=VarsDeclList ';')+
		public Group getGroup() { return cGroup; }
		
		//'glob'
		public Keyword getGlobKeyword_0() { return cGlobKeyword_0; }
		
		//(vars_list+=VarsDeclList ';')+
		public Group getGroup_1() { return cGroup_1; }
		
		//vars_list+=VarsDeclList
		public Assignment getVars_listAssignment_1_0() { return cVars_listAssignment_1_0; }
		
		//VarsDeclList
		public RuleCall getVars_listVarsDeclListParserRuleCall_1_0_0() { return cVars_listVarsDeclListParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class VarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.VarName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VarName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VarIdListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.VarIdList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cId_listAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cId_listVarNameParserRuleCall_0_0 = (RuleCall)cId_listAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cId_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cId_listVarNameParserRuleCall_1_1_0 = (RuleCall)cId_listAssignment_1_1.eContents().get(0);
		
		//VarIdList:
		//	id_list+=VarName (',' id_list+=VarName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//id_list+=VarName (',' id_list+=VarName)*
		public Group getGroup() { return cGroup; }
		
		//id_list+=VarName
		public Assignment getId_listAssignment_0() { return cId_listAssignment_0; }
		
		//VarName
		public RuleCall getId_listVarNameParserRuleCall_0_0() { return cId_listVarNameParserRuleCall_0_0; }
		
		//(',' id_list+=VarName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//id_list+=VarName
		public Assignment getId_listAssignment_1_1() { return cId_listAssignment_1_1; }
		
		//VarName
		public RuleCall getId_listVarNameParserRuleCall_1_1_0() { return cId_listVarNameParserRuleCall_1_1_0; }
	}
	public class VarsDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.VarsDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdVarIdListParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSortSortExprParserRuleCall_2_0 = (RuleCall)cSortAssignment_2.eContents().get(0);
		
		//VarsDecl:
		//	id=VarIdList ':' sort=SortExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//id=VarIdList ':' sort=SortExpr
		public Group getGroup() { return cGroup; }
		
		//id=VarIdList
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//VarIdList
		public RuleCall getIdVarIdListParserRuleCall_0_0() { return cIdVarIdListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//sort=SortExpr
		public Assignment getSortAssignment_2() { return cSortAssignment_2; }
		
		//SortExpr
		public RuleCall getSortSortExprParserRuleCall_2_0() { return cSortSortExprParserRuleCall_2_0; }
	}
	public class VarsDeclListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.VarsDeclList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarialbesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarialbesVarsDeclParserRuleCall_0_0 = (RuleCall)cVarialbesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarialbesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarialbesVarsDeclParserRuleCall_1_1_0 = (RuleCall)cVarialbesAssignment_1_1.eContents().get(0);
		
		//VarsDeclList:
		//	varialbes+=VarsDecl (',' varialbes+=VarsDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//varialbes+=VarsDecl (',' varialbes+=VarsDecl)*
		public Group getGroup() { return cGroup; }
		
		//varialbes+=VarsDecl
		public Assignment getVarialbesAssignment_0() { return cVarialbesAssignment_0; }
		
		//VarsDecl
		public RuleCall getVarialbesVarsDeclParserRuleCall_0_0() { return cVarialbesVarsDeclParserRuleCall_0_0; }
		
		//(',' varialbes+=VarsDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//varialbes+=VarsDecl
		public Assignment getVarialbesAssignment_1_1() { return cVarialbesAssignment_1_1; }
		
		//VarsDecl
		public RuleCall getVarialbesVarsDeclParserRuleCall_1_1_0() { return cVarialbesVarsDeclParserRuleCall_1_1_0; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.VarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cListVarsDeclListParserRuleCall_1_0_0 = (RuleCall)cListAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//VarSpec:
		//	'var' (list+=VarsDeclList ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' (list+=VarsDeclList ';')+
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//(list+=VarsDeclList ';')+
		public Group getGroup_1() { return cGroup_1; }
		
		//list+=VarsDeclList
		public Assignment getListAssignment_1_0() { return cListAssignment_1_0; }
		
		//VarsDeclList
		public RuleCall getListVarsDeclListParserRuleCall_1_0_0() { return cListVarsDeclListParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class MCRL2SpecEltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.mCRL2SpecElt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSortAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSortSortSpecParserRuleCall_0_0 = (RuleCall)cSortAssignment_0.eContents().get(0);
		private final Assignment cConstAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstConsSpecParserRuleCall_1_0 = (RuleCall)cConstAssignment_1.eContents().get(0);
		private final Assignment cMapAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMapMapSpecParserRuleCall_2_0 = (RuleCall)cMapAssignment_2.eContents().get(0);
		private final Assignment cEqnAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cEqnEqnSpecParserRuleCall_3_0 = (RuleCall)cEqnAssignment_3.eContents().get(0);
		private final Assignment cBlobalAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cBlobalGlobVarSpecParserRuleCall_4_0 = (RuleCall)cBlobalAssignment_4.eContents().get(0);
		private final Assignment cActAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cActActSpecParserRuleCall_5_0 = (RuleCall)cActAssignment_5.eContents().get(0);
		private final Assignment cProcAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cProcProcSpecParserRuleCall_6_0 = (RuleCall)cProcAssignment_6.eContents().get(0);
		
		//mCRL2SpecElt:
		//	sort=SortSpec | const=ConsSpec | map=MapSpec | eqn=EqnSpec | blobal=GlobVarSpec | act=ActSpec | proc=ProcSpec;
		@Override public ParserRule getRule() { return rule; }
		
		//sort=SortSpec | const=ConsSpec | map=MapSpec | eqn=EqnSpec | blobal=GlobVarSpec | act=ActSpec | proc=ProcSpec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sort=SortSpec
		public Assignment getSortAssignment_0() { return cSortAssignment_0; }
		
		//SortSpec
		public RuleCall getSortSortSpecParserRuleCall_0_0() { return cSortSortSpecParserRuleCall_0_0; }
		
		//const=ConsSpec
		public Assignment getConstAssignment_1() { return cConstAssignment_1; }
		
		//ConsSpec
		public RuleCall getConstConsSpecParserRuleCall_1_0() { return cConstConsSpecParserRuleCall_1_0; }
		
		//map=MapSpec
		public Assignment getMapAssignment_2() { return cMapAssignment_2; }
		
		//MapSpec
		public RuleCall getMapMapSpecParserRuleCall_2_0() { return cMapMapSpecParserRuleCall_2_0; }
		
		//eqn=EqnSpec
		public Assignment getEqnAssignment_3() { return cEqnAssignment_3; }
		
		//EqnSpec
		public RuleCall getEqnEqnSpecParserRuleCall_3_0() { return cEqnEqnSpecParserRuleCall_3_0; }
		
		//blobal=GlobVarSpec
		public Assignment getBlobalAssignment_4() { return cBlobalAssignment_4; }
		
		//GlobVarSpec
		public RuleCall getBlobalGlobVarSpecParserRuleCall_4_0() { return cBlobalGlobVarSpecParserRuleCall_4_0; }
		
		//act=ActSpec
		public Assignment getActAssignment_5() { return cActAssignment_5; }
		
		//ActSpec
		public RuleCall getActActSpecParserRuleCall_5_0() { return cActActSpecParserRuleCall_5_0; }
		
		//proc=ProcSpec
		public Assignment getProcAssignment_6() { return cProcAssignment_6; }
		
		//ProcSpec
		public RuleCall getProcProcSpecParserRuleCall_6_0() { return cProcProcSpecParserRuleCall_6_0; }
	}
	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tuks.mcrl2.dsl.MclrDsl.Init");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcProcExprParserRuleCall_1_0 = (RuleCall)cProcAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Init:
		//	'init' proc=ProcExpr ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'init' proc=ProcExpr ';'
		public Group getGroup() { return cGroup; }
		
		//'init'
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//proc=ProcExpr
		public Assignment getProcAssignment_1() { return cProcAssignment_1; }
		
		//ProcExpr
		public RuleCall getProcProcExprParserRuleCall_1_0() { return cProcProcExprParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final ActionNameElements pActionName;
	private final ActionNameListElements pActionNameList;
	private final ActionElements pAction;
	private final ActIdSetElements pActIdSet;
	private final AssignmentElements pAssignment;
	private final AssignmentListElements pAssignmentList;
	private final ActListElements pActList;
	private final ActDeclElements pActDecl;
	private final ActSpecElements pActSpec;
	private final BagEnumEltElements pBagEnumElt;
	private final BagEnumEltListElements pBagEnumEltList;
	private final ConstrNameElements pConstrName;
	private final ConstrDeclElements pConstrDecl;
	private final ConstrDeclListElements pConstrDeclList;
	private final ConsSpecElements pConsSpec;
	private final DataNameElements pDataName;
	private final DataExprUnitElements pDataExprUnit;
	private final DataExprUnitTermElements pDataExprUnitTerm;
	private final DataExprElements pDataExpr;
	private final DataExpr1Elements pDataExpr1;
	private final DataExpr2Elements pDataExpr2;
	private final DataExprTermElements pDataExprTerm;
	private final DataExprListElements pDataExprList;
	private final EqnDeclElements pEqnDecl;
	private final EqnSpecElements pEqnSpec;
	private final MapSpecElements pMapSpec;
	private final MultActIdElements pMultActId;
	private final MultActIdListElements pMultActIdList;
	private final MultActIdSetElements pMultActIdSet;
	private final ProcDeclElements pProcDecl;
	private final ProcSpecElements pProcSpec;
	private final ProjNameElements pProjName;
	private final ProjDeclElements pProjDecl;
	private final ProjDeclListElements pProjDeclList;
	private final ProcExprElements pProcExpr;
	private final ProcNameElements pProcName;
	private final ProcExprTermElements pProcExprTerm;
	private final SortNameElements pSortName;
	private final SortIdListElements pSortIdList;
	private final SortIdsDeclElements pSortIdsDecl;
	private final SortExprElements pSortExpr;
	private final SortExprTermElements pSortExprTerm;
	private final SortDeclElements pSortDecl;
	private final SortSpecElements pSortSpec;
	private final GlobVarSpecElements pGlobVarSpec;
	private final VarNameElements pVarName;
	private final VarIdListElements pVarIdList;
	private final VarsDeclElements pVarsDecl;
	private final VarsDeclListElements pVarsDeclList;
	private final VarSpecElements pVarSpec;
	private final MCRL2SpecEltElements pMCRL2SpecElt;
	private final InitElements pInit;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MclrDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pActionName = new ActionNameElements();
		this.pActionNameList = new ActionNameListElements();
		this.pAction = new ActionElements();
		this.pActIdSet = new ActIdSetElements();
		this.pAssignment = new AssignmentElements();
		this.pAssignmentList = new AssignmentListElements();
		this.pActList = new ActListElements();
		this.pActDecl = new ActDeclElements();
		this.pActSpec = new ActSpecElements();
		this.pBagEnumElt = new BagEnumEltElements();
		this.pBagEnumEltList = new BagEnumEltListElements();
		this.pConstrName = new ConstrNameElements();
		this.pConstrDecl = new ConstrDeclElements();
		this.pConstrDeclList = new ConstrDeclListElements();
		this.pConsSpec = new ConsSpecElements();
		this.pDataName = new DataNameElements();
		this.pDataExprUnit = new DataExprUnitElements();
		this.pDataExprUnitTerm = new DataExprUnitTermElements();
		this.pDataExpr = new DataExprElements();
		this.pDataExpr1 = new DataExpr1Elements();
		this.pDataExpr2 = new DataExpr2Elements();
		this.pDataExprTerm = new DataExprTermElements();
		this.pDataExprList = new DataExprListElements();
		this.pEqnDecl = new EqnDeclElements();
		this.pEqnSpec = new EqnSpecElements();
		this.pMapSpec = new MapSpecElements();
		this.pMultActId = new MultActIdElements();
		this.pMultActIdList = new MultActIdListElements();
		this.pMultActIdSet = new MultActIdSetElements();
		this.pProcDecl = new ProcDeclElements();
		this.pProcSpec = new ProcSpecElements();
		this.pProjName = new ProjNameElements();
		this.pProjDecl = new ProjDeclElements();
		this.pProjDeclList = new ProjDeclListElements();
		this.pProcExpr = new ProcExprElements();
		this.pProcName = new ProcNameElements();
		this.pProcExprTerm = new ProcExprTermElements();
		this.pSortName = new SortNameElements();
		this.pSortIdList = new SortIdListElements();
		this.pSortIdsDecl = new SortIdsDeclElements();
		this.pSortExpr = new SortExprElements();
		this.pSortExprTerm = new SortExprTermElements();
		this.pSortDecl = new SortDeclElements();
		this.pSortSpec = new SortSpecElements();
		this.pGlobVarSpec = new GlobVarSpecElements();
		this.pVarName = new VarNameElements();
		this.pVarIdList = new VarIdListElements();
		this.pVarsDecl = new VarsDeclElements();
		this.pVarsDeclList = new VarsDeclListElements();
		this.pVarSpec = new VarSpecElements();
		this.pMCRL2SpecElt = new MCRL2SpecEltElements();
		this.pInit = new InitElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tuks.mcrl2.dsl.MclrDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	-> left+=mCRL2SpecElt* -> init=Init -> right+=mCRL2SpecElt*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ActionName:
	//	name=ID;
	public ActionNameElements getActionNameAccess() {
		return pActionName;
	}
	
	public ParserRule getActionNameRule() {
		return getActionNameAccess().getRule();
	}
	
	//ActionNameList:
	//	id_list+=[ActionName] (',' id_list+=[ActionName])*;
	public ActionNameListElements getActionNameListAccess() {
		return pActionNameList;
	}
	
	public ParserRule getActionNameListRule() {
		return getActionNameListAccess().getRule();
	}
	
	//Action:
	//	id=[ActionName] ('(' exp=DataExprList ')')?;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//ActIdSet:
	//	'{' ids=ActionNameList '}';
	public ActIdSetElements getActIdSetAccess() {
		return pActIdSet;
	}
	
	public ParserRule getActIdSetRule() {
		return getActIdSetAccess().getRule();
	}
	
	//Assignment:
	//	id=VarName '=' data_exp=DataExpr;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//AssignmentList:
	//	ass+=Assignment (',' ass+=Assignment)*;
	public AssignmentListElements getAssignmentListAccess() {
		return pAssignmentList;
	}
	
	public ParserRule getAssignmentListRule() {
		return getAssignmentListAccess().getRule();
	}
	
	//ActList:
	//	id_list+=ActionName (',' id_list+=ActionName)*;
	public ActListElements getActListAccess() {
		return pActList;
	}
	
	public ParserRule getActListRule() {
		return getActListAccess().getRule();
	}
	
	//ActDecl:
	//	id=ActList (':' sort=SortExpr)? ';';
	public ActDeclElements getActDeclAccess() {
		return pActDecl;
	}
	
	public ParserRule getActDeclRule() {
		return getActDeclAccess().getRule();
	}
	
	//ActSpec:
	//	'act' act_list+=ActDecl+;
	public ActSpecElements getActSpecAccess() {
		return pActSpec;
	}
	
	public ParserRule getActSpecRule() {
		return getActSpecAccess().getRule();
	}
	
	//BagEnumElt:
	//	left=DataExpr ':' right=DataExpr;
	public BagEnumEltElements getBagEnumEltAccess() {
		return pBagEnumElt;
	}
	
	public ParserRule getBagEnumEltRule() {
		return getBagEnumEltAccess().getRule();
	}
	
	//BagEnumEltList:
	//	bag_list+=BagEnumElt (',' bag_list+=BagEnumElt)*;
	public BagEnumEltListElements getBagEnumEltListAccess() {
		return pBagEnumEltList;
	}
	
	public ParserRule getBagEnumEltListRule() {
		return getBagEnumEltListAccess().getRule();
	}
	
	//ConstrName:
	//	name=ID;
	public ConstrNameElements getConstrNameAccess() {
		return pConstrName;
	}
	
	public ParserRule getConstrNameRule() {
		return getConstrNameAccess().getRule();
	}
	
	//ConstrDecl:
	//	id=ConstrName -> ('(' proj=ProjDeclList ')')? -> ('?' right_id=ID)?;
	public ConstrDeclElements getConstrDeclAccess() {
		return pConstrDecl;
	}
	
	public ParserRule getConstrDeclRule() {
		return getConstrDeclAccess().getRule();
	}
	
	//ConstrDeclList:
	//	decl+=ConstrDecl ('|' decl+=ConstrDecl)*;
	public ConstrDeclListElements getConstrDeclListAccess() {
		return pConstrDeclList;
	}
	
	public ParserRule getConstrDeclListRule() {
		return getConstrDeclListAccess().getRule();
	}
	
	//ConsSpec:
	//	'cons' (ids+=ConstrName ';')+;
	public ConsSpecElements getConsSpecAccess() {
		return pConsSpec;
	}
	
	public ParserRule getConsSpecRule() {
		return getConsSpecAccess().getRule();
	}
	
	//DataName:
	//	name=ID;
	public DataNameElements getDataNameAccess() {
		return pDataName;
	}
	
	public ParserRule getDataNameRule() {
		return getDataNameAccess().getRule();
	}
	
	//DataExprUnit:
	//	lower=DataExprUnitTerm -> ('(' data=DataExprList ')')?;
	public DataExprUnitElements getDataExprUnitAccess() {
		return pDataExprUnit;
	}
	
	public ParserRule getDataExprUnitRule() {
		return getDataExprUnitAccess().getRule();
	}
	
	//DataExprUnitTerm:
	//	id=DataName | number=INT | is_true?='true' | is_false?='false' |
	//	'(' exp=DataExpr ')' | (is_exp?='!' | is_minus?='-' | is_sharp?='#') unit=DataExprUnit;
	public DataExprUnitTermElements getDataExprUnitTermAccess() {
		return pDataExprUnitTerm;
	}
	
	public ParserRule getDataExprUnitTermRule() {
		return getDataExprUnitTermAccess().getRule();
	}
	
	//DataExpr:
	//	left=DataExpr1 ('[' right_1=DataExpr '->' right_2=DataExpr ']' |
	//	'(' right=DataExprList ')');
	public DataExprElements getDataExprAccess() {
		return pDataExpr;
	}
	
	public ParserRule getDataExprRule() {
		return getDataExprAccess().getRule();
	}
	
	//DataExpr1:
	//	left=DataExpr2 (-> ('+' | '-' | '/' | 'div' | 'mod' | '*') right=DataExpr);
	public DataExpr1Elements getDataExpr1Access() {
		return pDataExpr1;
	}
	
	public ParserRule getDataExpr1Rule() {
		return getDataExpr1Access().getRule();
	}
	
	//DataExpr2:
	//	left=DataExprTerm (-> ('=>' | '||' | '&&' | '==' | '!=' | '<' | '<=' | '>=' | '>' | 'in' | '|>' | '<|' | '++' | '.')
	//	right=DataExpr // |
	//	//'whr' right_list=AssignmentList 'end'
	//);
	public DataExpr2Elements getDataExpr2Access() {
		return pDataExpr2;
	}
	
	public ParserRule getDataExpr2Rule() {
		return getDataExpr2Access().getRule();
	}
	
	//DataExprTerm:
	//	var_id=[VarName] | num=INT | is_true?='true' | is_false?='false' | is_sqaure_bracket?='[' data_list=DataExprList? ']'
	//	| is_curly_bracket?='{' (is_colon?=':' |
	//	-> bag=BagEnumEltList |
	//	-> data_exp_list=DataExprList |
	//	-> (var_decl=VarsDecl '|' data_exp=DataExpr))? '}' | is_round_bracket?='(' data_exp=DataExpr ')' |
	//	'!' data_exp=DataExpr |
	//	'-' data_exp=DataExpr |
	//	'#' data_exp=DataExpr | (is_forall?='forall' | is_exist?='exists' | is_lambda?='lambda') var_list=VarsDeclList '.'
	//	data_exp=DataExpr;
	public DataExprTermElements getDataExprTermAccess() {
		return pDataExprTerm;
	}
	
	public ParserRule getDataExprTermRule() {
		return getDataExprTermAccess().getRule();
	}
	
	//DataExprList:
	//	data_exp+=DataExpr (',' data_exp+=DataExpr)*;
	public DataExprListElements getDataExprListAccess() {
		return pDataExprList;
	}
	
	public ParserRule getDataExprListRule() {
		return getDataExprListAccess().getRule();
	}
	
	//EqnDecl:
	//	-> (cond=DataExpr '->')? left=DataExpr '=' right=DataExpr ';';
	public EqnDeclElements getEqnDeclAccess() {
		return pEqnDecl;
	}
	
	public ParserRule getEqnDeclRule() {
		return getEqnDeclAccess().getRule();
	}
	
	//EqnSpec:
	//	spec=VarSpec? 'eqn' eqn+=EqnDecl+;
	public EqnSpecElements getEqnSpecAccess() {
		return pEqnSpec;
	}
	
	public ParserRule getEqnSpecRule() {
		return getEqnSpecAccess().getRule();
	}
	
	//MapSpec:
	//	'map' (ids+=SortIdsDecl ';')+;
	public MapSpecElements getMapSpecAccess() {
		return pMapSpec;
	}
	
	public ParserRule getMapSpecRule() {
		return getMapSpecAccess().getRule();
	}
	
	//MultActId:
	//	ids+=[ActionName] ('|' ids+=[ActionName])*;
	public MultActIdElements getMultActIdAccess() {
		return pMultActId;
	}
	
	public ParserRule getMultActIdRule() {
		return getMultActIdAccess().getRule();
	}
	
	//MultActIdList:
	//	acts+=MultActId (',' acts+=MultActId)*;
	public MultActIdListElements getMultActIdListAccess() {
		return pMultActIdList;
	}
	
	public ParserRule getMultActIdListRule() {
		return getMultActIdListAccess().getRule();
	}
	
	//MultActIdSet:
	//	'{' (data=MultActIdList | is_empty?=WS) '}';
	public MultActIdSetElements getMultActIdSetAccess() {
		return pMultActIdSet;
	}
	
	public ParserRule getMultActIdSetRule() {
		return getMultActIdSetAccess().getRule();
	}
	
	//ProcDecl:
	//	id=ProcName ('(' variables=VarsDeclList ')')? '=' right=ProcExpr ';';
	public ProcDeclElements getProcDeclAccess() {
		return pProcDecl;
	}
	
	public ParserRule getProcDeclRule() {
		return getProcDeclAccess().getRule();
	}
	
	//ProcSpec:
	//	'proc' procs+=ProcDecl+;
	public ProcSpecElements getProcSpecAccess() {
		return pProcSpec;
	}
	
	public ParserRule getProcSpecRule() {
		return getProcSpecAccess().getRule();
	}
	
	//ProjName:
	//	name=ID;
	public ProjNameElements getProjNameAccess() {
		return pProjName;
	}
	
	public ParserRule getProjNameRule() {
		return getProjNameAccess().getRule();
	}
	
	//ProjDecl:
	//	(id=ProjName ':')? sort=SortExpr;
	public ProjDeclElements getProjDeclAccess() {
		return pProjDecl;
	}
	
	public ParserRule getProjDeclRule() {
		return getProjDeclAccess().getRule();
	}
	
	//ProjDeclList:
	//	proj+=ProjDecl (',' prof+=ProjDecl)*;
	public ProjDeclListElements getProjDeclListAccess() {
		return pProjDeclList;
	}
	
	public ParserRule getProjDeclListRule() {
		return getProjDeclListAccess().getRule();
	}
	
	//ProcExpr:
	//	left=ProcExprTerm ((is_plus?='+' | is_par?='||' | is_par_right?='||_' | is_left_shist?='<<' | is_point?='.' |
	//	is_or?='|') right=ProcExpr | is_at?='@' unit_right=DataExprUnit);
	public ProcExprElements getProcExprAccess() {
		return pProcExpr;
	}
	
	public ParserRule getProcExprRule() {
		return getProcExprAccess().getRule();
	}
	
	//ProcName:
	//	name=ID;
	public ProcNameElements getProcNameAccess() {
		return pProcName;
	}
	
	public ParserRule getProcNameRule() {
		return getProcNameAccess().getRule();
	}
	
	//ProcExprTerm:
	//	-> action=Action |
	//	-> (proc_id=[ProcName] '(' ass=AssignmentList? ')') |
	//	-> (map_id=[SortName] '(' ass=AssignmentList? ')') | is_delta?='delta' | is_tau?='tau' | is_block?='block' '('
	//	act_set=ActIdSet ',' proc_exp=ProcExpr ')' | is_allow?='allow' '(' multi_set=MultActIdSet ',' proc_exp=ProcExpr ')' |
	//	is_hide?='hide' '(' act_set=ActIdSet ',' proc_exp=ProcExpr ')' |
	//	//is_rename?='rename' '(' ren_set=RenExprSet ',' proc_exp=ProcExpr ')' |
	//	//is_comm?='comm'     '(' comm_set=CommExprSet ',' proc_exp=ProcExpr ')' |
	//	-> is_grp?='(' proc_exp=ProcExpr ')' | is_sum?='sum' variables=VarsDeclList '.' proc_exp=ProcExpr | DataExprUnit '->'
	//	proc_exp=ProcExpr ('<>' proc_exp_other=ProcExpr)? |
	//	'dist' VarsDeclList '[' data=DataExpr ']' '.' proc_exp=ProcExpr;
	public ProcExprTermElements getProcExprTermAccess() {
		return pProcExprTerm;
	}
	
	public ParserRule getProcExprTermRule() {
		return getProcExprTermAccess().getRule();
	}
	
	//SortName:
	//	name=ID;
	public SortNameElements getSortNameAccess() {
		return pSortName;
	}
	
	public ParserRule getSortNameRule() {
		return getSortNameAccess().getRule();
	}
	
	//SortIdList:
	//	id_list+=SortName (',' id_list+=SortName)*;
	public SortIdListElements getSortIdListAccess() {
		return pSortIdList;
	}
	
	public ParserRule getSortIdListRule() {
		return getSortIdListAccess().getRule();
	}
	
	//SortIdsDecl:
	//	id=SortIdList ':' sort=SortExpr;
	public SortIdsDeclElements getSortIdsDeclAccess() {
		return pSortIdsDecl;
	}
	
	public ParserRule getSortIdsDeclRule() {
		return getSortIdsDeclAccess().getRule();
	}
	
	//SortExpr:
	//	left=SortExprTerm ('->' | '#') right=SortExpr;
	public SortExprElements getSortExprAccess() {
		return pSortExpr;
	}
	
	public ParserRule getSortExprRule() {
		return getSortExprAccess().getRule();
	}
	
	//SortExprTerm:
	//	is_bool?='Bool' | is_pos?='Pos' | is_nat?='Nat' | is_int?='Int' | is_real?='Real' | (is_list?='List' | set?='Set' |
	//	bag?='Bag' | fset?='FSet' | fbag?='FBag') '(' exp=SortExpr ')'
	//	| id=[SortName] |
	//	'(' exp=SortExpr ')' |
	//	'struct' const=ConstrDeclList;
	public SortExprTermElements getSortExprTermAccess() {
		return pSortExprTerm;
	}
	
	public ParserRule getSortExprTermRule() {
		return getSortExprTermAccess().getRule();
	}
	
	//SortDecl:
	//	id=SortName '=' sort=SortExpr ';';
	public SortDeclElements getSortDeclAccess() {
		return pSortDecl;
	}
	
	public ParserRule getSortDeclRule() {
		return getSortDeclAccess().getRule();
	}
	
	//SortSpec:
	//	'sort' sorts+=SortDecl+;
	public SortSpecElements getSortSpecAccess() {
		return pSortSpec;
	}
	
	public ParserRule getSortSpecRule() {
		return getSortSpecAccess().getRule();
	}
	
	//GlobVarSpec:
	//	'glob' (vars_list+=VarsDeclList ';')+;
	public GlobVarSpecElements getGlobVarSpecAccess() {
		return pGlobVarSpec;
	}
	
	public ParserRule getGlobVarSpecRule() {
		return getGlobVarSpecAccess().getRule();
	}
	
	//VarName:
	//	name=ID;
	public VarNameElements getVarNameAccess() {
		return pVarName;
	}
	
	public ParserRule getVarNameRule() {
		return getVarNameAccess().getRule();
	}
	
	//VarIdList:
	//	id_list+=VarName (',' id_list+=VarName)*;
	public VarIdListElements getVarIdListAccess() {
		return pVarIdList;
	}
	
	public ParserRule getVarIdListRule() {
		return getVarIdListAccess().getRule();
	}
	
	//VarsDecl:
	//	id=VarIdList ':' sort=SortExpr;
	public VarsDeclElements getVarsDeclAccess() {
		return pVarsDecl;
	}
	
	public ParserRule getVarsDeclRule() {
		return getVarsDeclAccess().getRule();
	}
	
	//VarsDeclList:
	//	varialbes+=VarsDecl (',' varialbes+=VarsDecl)*;
	public VarsDeclListElements getVarsDeclListAccess() {
		return pVarsDeclList;
	}
	
	public ParserRule getVarsDeclListRule() {
		return getVarsDeclListAccess().getRule();
	}
	
	//VarSpec:
	//	'var' (list+=VarsDeclList ';')+;
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	//mCRL2SpecElt:
	//	sort=SortSpec | const=ConsSpec | map=MapSpec | eqn=EqnSpec | blobal=GlobVarSpec | act=ActSpec | proc=ProcSpec;
	public MCRL2SpecEltElements getMCRL2SpecEltAccess() {
		return pMCRL2SpecElt;
	}
	
	public ParserRule getMCRL2SpecEltRule() {
		return getMCRL2SpecEltAccess().getRule();
	}
	
	//Init:
	//	'init' proc=ProcExpr ';';
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
