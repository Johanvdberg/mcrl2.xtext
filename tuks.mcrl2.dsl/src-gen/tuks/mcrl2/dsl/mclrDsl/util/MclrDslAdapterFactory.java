/**
 * generated by Xtext 2.11.0.beta2
 */
package tuks.mcrl2.dsl.mclrDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import tuks.mcrl2.dsl.mclrDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see tuks.mcrl2.dsl.mclrDsl.MclrDslPackage
 * @generated
 */
public class MclrDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MclrDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MclrDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MclrDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MclrDslSwitch<Adapter> modelSwitch =
    new MclrDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseActionName(ActionName object)
      {
        return createActionNameAdapter();
      }
      @Override
      public Adapter caseActionNameList(ActionNameList object)
      {
        return createActionNameListAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseActIdSet(ActIdSet object)
      {
        return createActIdSetAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseAssignmentList(AssignmentList object)
      {
        return createAssignmentListAdapter();
      }
      @Override
      public Adapter caseActList(ActList object)
      {
        return createActListAdapter();
      }
      @Override
      public Adapter caseActDecl(ActDecl object)
      {
        return createActDeclAdapter();
      }
      @Override
      public Adapter caseActSpec(ActSpec object)
      {
        return createActSpecAdapter();
      }
      @Override
      public Adapter caseBagEnumElt(BagEnumElt object)
      {
        return createBagEnumEltAdapter();
      }
      @Override
      public Adapter caseBagEnumEltList(BagEnumEltList object)
      {
        return createBagEnumEltListAdapter();
      }
      @Override
      public Adapter caseConstrName(ConstrName object)
      {
        return createConstrNameAdapter();
      }
      @Override
      public Adapter caseConstrDecl(ConstrDecl object)
      {
        return createConstrDeclAdapter();
      }
      @Override
      public Adapter caseConstrDeclList(ConstrDeclList object)
      {
        return createConstrDeclListAdapter();
      }
      @Override
      public Adapter caseConsSpec(ConsSpec object)
      {
        return createConsSpecAdapter();
      }
      @Override
      public Adapter caseDataName(DataName object)
      {
        return createDataNameAdapter();
      }
      @Override
      public Adapter caseDataExprUnit(DataExprUnit object)
      {
        return createDataExprUnitAdapter();
      }
      @Override
      public Adapter caseDataExprUnitTerm(DataExprUnitTerm object)
      {
        return createDataExprUnitTermAdapter();
      }
      @Override
      public Adapter caseDataExpr(DataExpr object)
      {
        return createDataExprAdapter();
      }
      @Override
      public Adapter caseDataExpr1(DataExpr1 object)
      {
        return createDataExpr1Adapter();
      }
      @Override
      public Adapter caseDataExpr2(DataExpr2 object)
      {
        return createDataExpr2Adapter();
      }
      @Override
      public Adapter caseDataExprTerm(DataExprTerm object)
      {
        return createDataExprTermAdapter();
      }
      @Override
      public Adapter caseDataExprList(DataExprList object)
      {
        return createDataExprListAdapter();
      }
      @Override
      public Adapter caseEqnDecl(EqnDecl object)
      {
        return createEqnDeclAdapter();
      }
      @Override
      public Adapter caseEqnSpec(EqnSpec object)
      {
        return createEqnSpecAdapter();
      }
      @Override
      public Adapter caseMapSpec(MapSpec object)
      {
        return createMapSpecAdapter();
      }
      @Override
      public Adapter caseMultActId(MultActId object)
      {
        return createMultActIdAdapter();
      }
      @Override
      public Adapter caseMultActIdList(MultActIdList object)
      {
        return createMultActIdListAdapter();
      }
      @Override
      public Adapter caseMultActIdSet(MultActIdSet object)
      {
        return createMultActIdSetAdapter();
      }
      @Override
      public Adapter caseProcDecl(ProcDecl object)
      {
        return createProcDeclAdapter();
      }
      @Override
      public Adapter caseProcSpec(ProcSpec object)
      {
        return createProcSpecAdapter();
      }
      @Override
      public Adapter caseProjName(ProjName object)
      {
        return createProjNameAdapter();
      }
      @Override
      public Adapter caseProjDecl(ProjDecl object)
      {
        return createProjDeclAdapter();
      }
      @Override
      public Adapter caseProjDeclList(ProjDeclList object)
      {
        return createProjDeclListAdapter();
      }
      @Override
      public Adapter caseProcExpr(ProcExpr object)
      {
        return createProcExprAdapter();
      }
      @Override
      public Adapter caseProcName(ProcName object)
      {
        return createProcNameAdapter();
      }
      @Override
      public Adapter caseProcExprTerm(ProcExprTerm object)
      {
        return createProcExprTermAdapter();
      }
      @Override
      public Adapter caseSortName(SortName object)
      {
        return createSortNameAdapter();
      }
      @Override
      public Adapter caseSortIdList(SortIdList object)
      {
        return createSortIdListAdapter();
      }
      @Override
      public Adapter caseSortIdsDecl(SortIdsDecl object)
      {
        return createSortIdsDeclAdapter();
      }
      @Override
      public Adapter caseSortExpr(SortExpr object)
      {
        return createSortExprAdapter();
      }
      @Override
      public Adapter caseSortExprTerm(SortExprTerm object)
      {
        return createSortExprTermAdapter();
      }
      @Override
      public Adapter caseSortDecl(SortDecl object)
      {
        return createSortDeclAdapter();
      }
      @Override
      public Adapter caseSortSpec(SortSpec object)
      {
        return createSortSpecAdapter();
      }
      @Override
      public Adapter caseGlobVarSpec(GlobVarSpec object)
      {
        return createGlobVarSpecAdapter();
      }
      @Override
      public Adapter caseVarName(VarName object)
      {
        return createVarNameAdapter();
      }
      @Override
      public Adapter caseVarIdList(VarIdList object)
      {
        return createVarIdListAdapter();
      }
      @Override
      public Adapter caseVarsDecl(VarsDecl object)
      {
        return createVarsDeclAdapter();
      }
      @Override
      public Adapter caseVarsDeclList(VarsDeclList object)
      {
        return createVarsDeclListAdapter();
      }
      @Override
      public Adapter caseVarSpec(VarSpec object)
      {
        return createVarSpecAdapter();
      }
      @Override
      public Adapter casemCRL2SpecElt(mCRL2SpecElt object)
      {
        return createmCRL2SpecEltAdapter();
      }
      @Override
      public Adapter caseInit(Init object)
      {
        return createInitAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ActionName <em>Action Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ActionName
   * @generated
   */
  public Adapter createActionNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ActionNameList <em>Action Name List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ActionNameList
   * @generated
   */
  public Adapter createActionNameListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ActIdSet <em>Act Id Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ActIdSet
   * @generated
   */
  public Adapter createActIdSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.AssignmentList <em>Assignment List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.AssignmentList
   * @generated
   */
  public Adapter createAssignmentListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ActList <em>Act List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ActList
   * @generated
   */
  public Adapter createActListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ActDecl <em>Act Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ActDecl
   * @generated
   */
  public Adapter createActDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ActSpec <em>Act Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ActSpec
   * @generated
   */
  public Adapter createActSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.BagEnumElt <em>Bag Enum Elt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.BagEnumElt
   * @generated
   */
  public Adapter createBagEnumEltAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.BagEnumEltList <em>Bag Enum Elt List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.BagEnumEltList
   * @generated
   */
  public Adapter createBagEnumEltListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ConstrName <em>Constr Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ConstrName
   * @generated
   */
  public Adapter createConstrNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ConstrDecl <em>Constr Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ConstrDecl
   * @generated
   */
  public Adapter createConstrDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ConstrDeclList <em>Constr Decl List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ConstrDeclList
   * @generated
   */
  public Adapter createConstrDeclListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ConsSpec <em>Cons Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ConsSpec
   * @generated
   */
  public Adapter createConsSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.DataName <em>Data Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.DataName
   * @generated
   */
  public Adapter createDataNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.DataExprUnit <em>Data Expr Unit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.DataExprUnit
   * @generated
   */
  public Adapter createDataExprUnitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.DataExprUnitTerm <em>Data Expr Unit Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.DataExprUnitTerm
   * @generated
   */
  public Adapter createDataExprUnitTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.DataExpr <em>Data Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.DataExpr
   * @generated
   */
  public Adapter createDataExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.DataExpr1 <em>Data Expr1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.DataExpr1
   * @generated
   */
  public Adapter createDataExpr1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.DataExpr2 <em>Data Expr2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.DataExpr2
   * @generated
   */
  public Adapter createDataExpr2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.DataExprTerm <em>Data Expr Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.DataExprTerm
   * @generated
   */
  public Adapter createDataExprTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.DataExprList <em>Data Expr List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.DataExprList
   * @generated
   */
  public Adapter createDataExprListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.EqnDecl <em>Eqn Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.EqnDecl
   * @generated
   */
  public Adapter createEqnDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.EqnSpec <em>Eqn Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.EqnSpec
   * @generated
   */
  public Adapter createEqnSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.MapSpec <em>Map Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.MapSpec
   * @generated
   */
  public Adapter createMapSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.MultActId <em>Mult Act Id</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.MultActId
   * @generated
   */
  public Adapter createMultActIdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.MultActIdList <em>Mult Act Id List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.MultActIdList
   * @generated
   */
  public Adapter createMultActIdListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.MultActIdSet <em>Mult Act Id Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.MultActIdSet
   * @generated
   */
  public Adapter createMultActIdSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ProcDecl <em>Proc Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ProcDecl
   * @generated
   */
  public Adapter createProcDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ProcSpec <em>Proc Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ProcSpec
   * @generated
   */
  public Adapter createProcSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ProjName <em>Proj Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ProjName
   * @generated
   */
  public Adapter createProjNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ProjDecl <em>Proj Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ProjDecl
   * @generated
   */
  public Adapter createProjDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ProjDeclList <em>Proj Decl List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ProjDeclList
   * @generated
   */
  public Adapter createProjDeclListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ProcExpr <em>Proc Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ProcExpr
   * @generated
   */
  public Adapter createProcExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ProcName <em>Proc Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ProcName
   * @generated
   */
  public Adapter createProcNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.ProcExprTerm <em>Proc Expr Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.ProcExprTerm
   * @generated
   */
  public Adapter createProcExprTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.SortName <em>Sort Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.SortName
   * @generated
   */
  public Adapter createSortNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.SortIdList <em>Sort Id List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.SortIdList
   * @generated
   */
  public Adapter createSortIdListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.SortIdsDecl <em>Sort Ids Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.SortIdsDecl
   * @generated
   */
  public Adapter createSortIdsDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.SortExpr <em>Sort Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.SortExpr
   * @generated
   */
  public Adapter createSortExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.SortExprTerm <em>Sort Expr Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.SortExprTerm
   * @generated
   */
  public Adapter createSortExprTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.SortDecl <em>Sort Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.SortDecl
   * @generated
   */
  public Adapter createSortDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.SortSpec <em>Sort Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.SortSpec
   * @generated
   */
  public Adapter createSortSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.GlobVarSpec <em>Glob Var Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.GlobVarSpec
   * @generated
   */
  public Adapter createGlobVarSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.VarName <em>Var Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.VarName
   * @generated
   */
  public Adapter createVarNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.VarIdList <em>Var Id List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.VarIdList
   * @generated
   */
  public Adapter createVarIdListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.VarsDecl <em>Vars Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.VarsDecl
   * @generated
   */
  public Adapter createVarsDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.VarsDeclList <em>Vars Decl List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.VarsDeclList
   * @generated
   */
  public Adapter createVarsDeclListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.VarSpec <em>Var Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.VarSpec
   * @generated
   */
  public Adapter createVarSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.mCRL2SpecElt <em>mCRL2 Spec Elt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.mCRL2SpecElt
   * @generated
   */
  public Adapter createmCRL2SpecEltAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tuks.mcrl2.dsl.mclrDsl.Init <em>Init</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tuks.mcrl2.dsl.mclrDsl.Init
   * @generated
   */
  public Adapter createInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MclrDslAdapterFactory
