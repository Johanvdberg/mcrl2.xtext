/**
 * generated by Xtext 2.11.0.beta2
 */
package tuks.mcrl2.dsl.mclrDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tuks.mcrl2.dsl.mclrDsl.BagEnumEltList;
import tuks.mcrl2.dsl.mclrDsl.DataExpr;
import tuks.mcrl2.dsl.mclrDsl.DataExprList;
import tuks.mcrl2.dsl.mclrDsl.DataExprTerm;
import tuks.mcrl2.dsl.mclrDsl.MclrDslPackage;
import tuks.mcrl2.dsl.mclrDsl.VarName;
import tuks.mcrl2.dsl.mclrDsl.VarsDecl;
import tuks.mcrl2.dsl.mclrDsl.VarsDeclList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Data Expr Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#getVar_id <em>Var id</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#getNum <em>Num</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#isIs_true <em>Is true</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#isIs_false <em>Is false</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#isIs_sqaure_bracket <em>Is sqaure bracket</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#getData_list <em>Data list</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#isIs_curly_bracket <em>Is curly bracket</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#isIs_colon <em>Is colon</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#getBag <em>Bag</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#getData_exp_list <em>Data exp list</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#getVar_decl <em>Var decl</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#getData_exp <em>Data exp</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#isIs_round_bracket <em>Is round bracket</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#isIs_forall <em>Is forall</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#isIs_exist <em>Is exist</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#isIs_lambda <em>Is lambda</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.DataExprTermImpl#getVar_list <em>Var list</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataExprTermImpl extends MinimalEObjectImpl.Container implements DataExprTerm
{
  /**
   * The cached value of the '{@link #getVar_id() <em>Var id</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar_id()
   * @generated
   * @ordered
   */
  protected VarName var_id;

  /**
   * The default value of the '{@link #getNum() <em>Num</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNum()
   * @generated
   * @ordered
   */
  protected static final int NUM_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNum() <em>Num</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNum()
   * @generated
   * @ordered
   */
  protected int num = NUM_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_true() <em>Is true</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_true()
   * @generated
   * @ordered
   */
  protected static final boolean IS_TRUE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_true() <em>Is true</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_true()
   * @generated
   * @ordered
   */
  protected boolean is_true = IS_TRUE_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_false() <em>Is false</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_false()
   * @generated
   * @ordered
   */
  protected static final boolean IS_FALSE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_false() <em>Is false</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_false()
   * @generated
   * @ordered
   */
  protected boolean is_false = IS_FALSE_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_sqaure_bracket() <em>Is sqaure bracket</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_sqaure_bracket()
   * @generated
   * @ordered
   */
  protected static final boolean IS_SQAURE_BRACKET_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_sqaure_bracket() <em>Is sqaure bracket</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_sqaure_bracket()
   * @generated
   * @ordered
   */
  protected boolean is_sqaure_bracket = IS_SQAURE_BRACKET_EDEFAULT;

  /**
   * The cached value of the '{@link #getData_list() <em>Data list</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getData_list()
   * @generated
   * @ordered
   */
  protected DataExprList data_list;

  /**
   * The default value of the '{@link #isIs_curly_bracket() <em>Is curly bracket</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_curly_bracket()
   * @generated
   * @ordered
   */
  protected static final boolean IS_CURLY_BRACKET_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_curly_bracket() <em>Is curly bracket</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_curly_bracket()
   * @generated
   * @ordered
   */
  protected boolean is_curly_bracket = IS_CURLY_BRACKET_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_colon() <em>Is colon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_colon()
   * @generated
   * @ordered
   */
  protected static final boolean IS_COLON_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_colon() <em>Is colon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_colon()
   * @generated
   * @ordered
   */
  protected boolean is_colon = IS_COLON_EDEFAULT;

  /**
   * The cached value of the '{@link #getBag() <em>Bag</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBag()
   * @generated
   * @ordered
   */
  protected BagEnumEltList bag;

  /**
   * The cached value of the '{@link #getData_exp_list() <em>Data exp list</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getData_exp_list()
   * @generated
   * @ordered
   */
  protected DataExprList data_exp_list;

  /**
   * The cached value of the '{@link #getVar_decl() <em>Var decl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar_decl()
   * @generated
   * @ordered
   */
  protected VarsDecl var_decl;

  /**
   * The cached value of the '{@link #getData_exp() <em>Data exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getData_exp()
   * @generated
   * @ordered
   */
  protected DataExpr data_exp;

  /**
   * The default value of the '{@link #isIs_round_bracket() <em>Is round bracket</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_round_bracket()
   * @generated
   * @ordered
   */
  protected static final boolean IS_ROUND_BRACKET_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_round_bracket() <em>Is round bracket</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_round_bracket()
   * @generated
   * @ordered
   */
  protected boolean is_round_bracket = IS_ROUND_BRACKET_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_forall() <em>Is forall</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_forall()
   * @generated
   * @ordered
   */
  protected static final boolean IS_FORALL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_forall() <em>Is forall</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_forall()
   * @generated
   * @ordered
   */
  protected boolean is_forall = IS_FORALL_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_exist() <em>Is exist</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_exist()
   * @generated
   * @ordered
   */
  protected static final boolean IS_EXIST_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_exist() <em>Is exist</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_exist()
   * @generated
   * @ordered
   */
  protected boolean is_exist = IS_EXIST_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_lambda() <em>Is lambda</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_lambda()
   * @generated
   * @ordered
   */
  protected static final boolean IS_LAMBDA_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_lambda() <em>Is lambda</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_lambda()
   * @generated
   * @ordered
   */
  protected boolean is_lambda = IS_LAMBDA_EDEFAULT;

  /**
   * The cached value of the '{@link #getVar_list() <em>Var list</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar_list()
   * @generated
   * @ordered
   */
  protected VarsDeclList var_list;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataExprTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclrDslPackage.Literals.DATA_EXPR_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarName getVar_id()
  {
    if (var_id != null && var_id.eIsProxy())
    {
      InternalEObject oldVar_id = (InternalEObject)var_id;
      var_id = (VarName)eResolveProxy(oldVar_id);
      if (var_id != oldVar_id)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MclrDslPackage.DATA_EXPR_TERM__VAR_ID, oldVar_id, var_id));
      }
    }
    return var_id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarName basicGetVar_id()
  {
    return var_id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVar_id(VarName newVar_id)
  {
    VarName oldVar_id = var_id;
    var_id = newVar_id;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__VAR_ID, oldVar_id, var_id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getNum()
  {
    return num;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNum(int newNum)
  {
    int oldNum = num;
    num = newNum;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__NUM, oldNum, num));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_true()
  {
    return is_true;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_true(boolean newIs_true)
  {
    boolean oldIs_true = is_true;
    is_true = newIs_true;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__IS_TRUE, oldIs_true, is_true));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_false()
  {
    return is_false;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_false(boolean newIs_false)
  {
    boolean oldIs_false = is_false;
    is_false = newIs_false;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__IS_FALSE, oldIs_false, is_false));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_sqaure_bracket()
  {
    return is_sqaure_bracket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_sqaure_bracket(boolean newIs_sqaure_bracket)
  {
    boolean oldIs_sqaure_bracket = is_sqaure_bracket;
    is_sqaure_bracket = newIs_sqaure_bracket;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__IS_SQAURE_BRACKET, oldIs_sqaure_bracket, is_sqaure_bracket));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataExprList getData_list()
  {
    return data_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetData_list(DataExprList newData_list, NotificationChain msgs)
  {
    DataExprList oldData_list = data_list;
    data_list = newData_list;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__DATA_LIST, oldData_list, newData_list);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setData_list(DataExprList newData_list)
  {
    if (newData_list != data_list)
    {
      NotificationChain msgs = null;
      if (data_list != null)
        msgs = ((InternalEObject)data_list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__DATA_LIST, null, msgs);
      if (newData_list != null)
        msgs = ((InternalEObject)newData_list).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__DATA_LIST, null, msgs);
      msgs = basicSetData_list(newData_list, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__DATA_LIST, newData_list, newData_list));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_curly_bracket()
  {
    return is_curly_bracket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_curly_bracket(boolean newIs_curly_bracket)
  {
    boolean oldIs_curly_bracket = is_curly_bracket;
    is_curly_bracket = newIs_curly_bracket;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__IS_CURLY_BRACKET, oldIs_curly_bracket, is_curly_bracket));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_colon()
  {
    return is_colon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_colon(boolean newIs_colon)
  {
    boolean oldIs_colon = is_colon;
    is_colon = newIs_colon;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__IS_COLON, oldIs_colon, is_colon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BagEnumEltList getBag()
  {
    return bag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBag(BagEnumEltList newBag, NotificationChain msgs)
  {
    BagEnumEltList oldBag = bag;
    bag = newBag;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__BAG, oldBag, newBag);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBag(BagEnumEltList newBag)
  {
    if (newBag != bag)
    {
      NotificationChain msgs = null;
      if (bag != null)
        msgs = ((InternalEObject)bag).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__BAG, null, msgs);
      if (newBag != null)
        msgs = ((InternalEObject)newBag).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__BAG, null, msgs);
      msgs = basicSetBag(newBag, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__BAG, newBag, newBag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataExprList getData_exp_list()
  {
    return data_exp_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetData_exp_list(DataExprList newData_exp_list, NotificationChain msgs)
  {
    DataExprList oldData_exp_list = data_exp_list;
    data_exp_list = newData_exp_list;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__DATA_EXP_LIST, oldData_exp_list, newData_exp_list);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setData_exp_list(DataExprList newData_exp_list)
  {
    if (newData_exp_list != data_exp_list)
    {
      NotificationChain msgs = null;
      if (data_exp_list != null)
        msgs = ((InternalEObject)data_exp_list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__DATA_EXP_LIST, null, msgs);
      if (newData_exp_list != null)
        msgs = ((InternalEObject)newData_exp_list).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__DATA_EXP_LIST, null, msgs);
      msgs = basicSetData_exp_list(newData_exp_list, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__DATA_EXP_LIST, newData_exp_list, newData_exp_list));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarsDecl getVar_decl()
  {
    return var_decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVar_decl(VarsDecl newVar_decl, NotificationChain msgs)
  {
    VarsDecl oldVar_decl = var_decl;
    var_decl = newVar_decl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__VAR_DECL, oldVar_decl, newVar_decl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVar_decl(VarsDecl newVar_decl)
  {
    if (newVar_decl != var_decl)
    {
      NotificationChain msgs = null;
      if (var_decl != null)
        msgs = ((InternalEObject)var_decl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__VAR_DECL, null, msgs);
      if (newVar_decl != null)
        msgs = ((InternalEObject)newVar_decl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__VAR_DECL, null, msgs);
      msgs = basicSetVar_decl(newVar_decl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__VAR_DECL, newVar_decl, newVar_decl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataExpr getData_exp()
  {
    return data_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetData_exp(DataExpr newData_exp, NotificationChain msgs)
  {
    DataExpr oldData_exp = data_exp;
    data_exp = newData_exp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__DATA_EXP, oldData_exp, newData_exp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setData_exp(DataExpr newData_exp)
  {
    if (newData_exp != data_exp)
    {
      NotificationChain msgs = null;
      if (data_exp != null)
        msgs = ((InternalEObject)data_exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__DATA_EXP, null, msgs);
      if (newData_exp != null)
        msgs = ((InternalEObject)newData_exp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__DATA_EXP, null, msgs);
      msgs = basicSetData_exp(newData_exp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__DATA_EXP, newData_exp, newData_exp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_round_bracket()
  {
    return is_round_bracket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_round_bracket(boolean newIs_round_bracket)
  {
    boolean oldIs_round_bracket = is_round_bracket;
    is_round_bracket = newIs_round_bracket;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__IS_ROUND_BRACKET, oldIs_round_bracket, is_round_bracket));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_forall()
  {
    return is_forall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_forall(boolean newIs_forall)
  {
    boolean oldIs_forall = is_forall;
    is_forall = newIs_forall;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__IS_FORALL, oldIs_forall, is_forall));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_exist()
  {
    return is_exist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_exist(boolean newIs_exist)
  {
    boolean oldIs_exist = is_exist;
    is_exist = newIs_exist;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__IS_EXIST, oldIs_exist, is_exist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_lambda()
  {
    return is_lambda;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_lambda(boolean newIs_lambda)
  {
    boolean oldIs_lambda = is_lambda;
    is_lambda = newIs_lambda;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__IS_LAMBDA, oldIs_lambda, is_lambda));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarsDeclList getVar_list()
  {
    return var_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVar_list(VarsDeclList newVar_list, NotificationChain msgs)
  {
    VarsDeclList oldVar_list = var_list;
    var_list = newVar_list;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__VAR_LIST, oldVar_list, newVar_list);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVar_list(VarsDeclList newVar_list)
  {
    if (newVar_list != var_list)
    {
      NotificationChain msgs = null;
      if (var_list != null)
        msgs = ((InternalEObject)var_list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__VAR_LIST, null, msgs);
      if (newVar_list != null)
        msgs = ((InternalEObject)newVar_list).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.DATA_EXPR_TERM__VAR_LIST, null, msgs);
      msgs = basicSetVar_list(newVar_list, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.DATA_EXPR_TERM__VAR_LIST, newVar_list, newVar_list));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclrDslPackage.DATA_EXPR_TERM__DATA_LIST:
        return basicSetData_list(null, msgs);
      case MclrDslPackage.DATA_EXPR_TERM__BAG:
        return basicSetBag(null, msgs);
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP_LIST:
        return basicSetData_exp_list(null, msgs);
      case MclrDslPackage.DATA_EXPR_TERM__VAR_DECL:
        return basicSetVar_decl(null, msgs);
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP:
        return basicSetData_exp(null, msgs);
      case MclrDslPackage.DATA_EXPR_TERM__VAR_LIST:
        return basicSetVar_list(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclrDslPackage.DATA_EXPR_TERM__VAR_ID:
        if (resolve) return getVar_id();
        return basicGetVar_id();
      case MclrDslPackage.DATA_EXPR_TERM__NUM:
        return getNum();
      case MclrDslPackage.DATA_EXPR_TERM__IS_TRUE:
        return isIs_true();
      case MclrDslPackage.DATA_EXPR_TERM__IS_FALSE:
        return isIs_false();
      case MclrDslPackage.DATA_EXPR_TERM__IS_SQAURE_BRACKET:
        return isIs_sqaure_bracket();
      case MclrDslPackage.DATA_EXPR_TERM__DATA_LIST:
        return getData_list();
      case MclrDslPackage.DATA_EXPR_TERM__IS_CURLY_BRACKET:
        return isIs_curly_bracket();
      case MclrDslPackage.DATA_EXPR_TERM__IS_COLON:
        return isIs_colon();
      case MclrDslPackage.DATA_EXPR_TERM__BAG:
        return getBag();
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP_LIST:
        return getData_exp_list();
      case MclrDslPackage.DATA_EXPR_TERM__VAR_DECL:
        return getVar_decl();
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP:
        return getData_exp();
      case MclrDslPackage.DATA_EXPR_TERM__IS_ROUND_BRACKET:
        return isIs_round_bracket();
      case MclrDslPackage.DATA_EXPR_TERM__IS_FORALL:
        return isIs_forall();
      case MclrDslPackage.DATA_EXPR_TERM__IS_EXIST:
        return isIs_exist();
      case MclrDslPackage.DATA_EXPR_TERM__IS_LAMBDA:
        return isIs_lambda();
      case MclrDslPackage.DATA_EXPR_TERM__VAR_LIST:
        return getVar_list();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclrDslPackage.DATA_EXPR_TERM__VAR_ID:
        setVar_id((VarName)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__NUM:
        setNum((Integer)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_TRUE:
        setIs_true((Boolean)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_FALSE:
        setIs_false((Boolean)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_SQAURE_BRACKET:
        setIs_sqaure_bracket((Boolean)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__DATA_LIST:
        setData_list((DataExprList)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_CURLY_BRACKET:
        setIs_curly_bracket((Boolean)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_COLON:
        setIs_colon((Boolean)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__BAG:
        setBag((BagEnumEltList)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP_LIST:
        setData_exp_list((DataExprList)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__VAR_DECL:
        setVar_decl((VarsDecl)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP:
        setData_exp((DataExpr)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_ROUND_BRACKET:
        setIs_round_bracket((Boolean)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_FORALL:
        setIs_forall((Boolean)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_EXIST:
        setIs_exist((Boolean)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_LAMBDA:
        setIs_lambda((Boolean)newValue);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__VAR_LIST:
        setVar_list((VarsDeclList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.DATA_EXPR_TERM__VAR_ID:
        setVar_id((VarName)null);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__NUM:
        setNum(NUM_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_TRUE:
        setIs_true(IS_TRUE_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_FALSE:
        setIs_false(IS_FALSE_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_SQAURE_BRACKET:
        setIs_sqaure_bracket(IS_SQAURE_BRACKET_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__DATA_LIST:
        setData_list((DataExprList)null);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_CURLY_BRACKET:
        setIs_curly_bracket(IS_CURLY_BRACKET_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_COLON:
        setIs_colon(IS_COLON_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__BAG:
        setBag((BagEnumEltList)null);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP_LIST:
        setData_exp_list((DataExprList)null);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__VAR_DECL:
        setVar_decl((VarsDecl)null);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP:
        setData_exp((DataExpr)null);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_ROUND_BRACKET:
        setIs_round_bracket(IS_ROUND_BRACKET_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_FORALL:
        setIs_forall(IS_FORALL_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_EXIST:
        setIs_exist(IS_EXIST_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__IS_LAMBDA:
        setIs_lambda(IS_LAMBDA_EDEFAULT);
        return;
      case MclrDslPackage.DATA_EXPR_TERM__VAR_LIST:
        setVar_list((VarsDeclList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.DATA_EXPR_TERM__VAR_ID:
        return var_id != null;
      case MclrDslPackage.DATA_EXPR_TERM__NUM:
        return num != NUM_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__IS_TRUE:
        return is_true != IS_TRUE_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__IS_FALSE:
        return is_false != IS_FALSE_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__IS_SQAURE_BRACKET:
        return is_sqaure_bracket != IS_SQAURE_BRACKET_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__DATA_LIST:
        return data_list != null;
      case MclrDslPackage.DATA_EXPR_TERM__IS_CURLY_BRACKET:
        return is_curly_bracket != IS_CURLY_BRACKET_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__IS_COLON:
        return is_colon != IS_COLON_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__BAG:
        return bag != null;
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP_LIST:
        return data_exp_list != null;
      case MclrDslPackage.DATA_EXPR_TERM__VAR_DECL:
        return var_decl != null;
      case MclrDslPackage.DATA_EXPR_TERM__DATA_EXP:
        return data_exp != null;
      case MclrDslPackage.DATA_EXPR_TERM__IS_ROUND_BRACKET:
        return is_round_bracket != IS_ROUND_BRACKET_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__IS_FORALL:
        return is_forall != IS_FORALL_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__IS_EXIST:
        return is_exist != IS_EXIST_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__IS_LAMBDA:
        return is_lambda != IS_LAMBDA_EDEFAULT;
      case MclrDslPackage.DATA_EXPR_TERM__VAR_LIST:
        return var_list != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (num: ");
    result.append(num);
    result.append(", is_true: ");
    result.append(is_true);
    result.append(", is_false: ");
    result.append(is_false);
    result.append(", is_sqaure_bracket: ");
    result.append(is_sqaure_bracket);
    result.append(", is_curly_bracket: ");
    result.append(is_curly_bracket);
    result.append(", is_colon: ");
    result.append(is_colon);
    result.append(", is_round_bracket: ");
    result.append(is_round_bracket);
    result.append(", is_forall: ");
    result.append(is_forall);
    result.append(", is_exist: ");
    result.append(is_exist);
    result.append(", is_lambda: ");
    result.append(is_lambda);
    result.append(')');
    return result.toString();
  }

} //DataExprTermImpl
