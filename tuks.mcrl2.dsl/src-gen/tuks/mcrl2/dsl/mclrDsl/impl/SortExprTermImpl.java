/**
 * generated by Xtext 2.11.0.beta2
 */
package tuks.mcrl2.dsl.mclrDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tuks.mcrl2.dsl.mclrDsl.ConstrDeclList;
import tuks.mcrl2.dsl.mclrDsl.MclrDslPackage;
import tuks.mcrl2.dsl.mclrDsl.SortExpr;
import tuks.mcrl2.dsl.mclrDsl.SortExprTerm;
import tuks.mcrl2.dsl.mclrDsl.SortName;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sort Expr Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isIs_bool <em>Is bool</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isIs_pos <em>Is pos</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isIs_nat <em>Is nat</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isIs_int <em>Is int</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isIs_real <em>Is real</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isIs_list <em>Is list</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isSet <em>Set</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isBag <em>Bag</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isFset <em>Fset</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#isFbag <em>Fbag</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#getId <em>Id</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.SortExprTermImpl#getConst <em>Const</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SortExprTermImpl extends MinimalEObjectImpl.Container implements SortExprTerm
{
  /**
   * The default value of the '{@link #isIs_bool() <em>Is bool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_bool()
   * @generated
   * @ordered
   */
  protected static final boolean IS_BOOL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_bool() <em>Is bool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_bool()
   * @generated
   * @ordered
   */
  protected boolean is_bool = IS_BOOL_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_pos() <em>Is pos</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_pos()
   * @generated
   * @ordered
   */
  protected static final boolean IS_POS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_pos() <em>Is pos</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_pos()
   * @generated
   * @ordered
   */
  protected boolean is_pos = IS_POS_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_nat() <em>Is nat</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_nat()
   * @generated
   * @ordered
   */
  protected static final boolean IS_NAT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_nat() <em>Is nat</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_nat()
   * @generated
   * @ordered
   */
  protected boolean is_nat = IS_NAT_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_int() <em>Is int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_int()
   * @generated
   * @ordered
   */
  protected static final boolean IS_INT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_int() <em>Is int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_int()
   * @generated
   * @ordered
   */
  protected boolean is_int = IS_INT_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_real() <em>Is real</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_real()
   * @generated
   * @ordered
   */
  protected static final boolean IS_REAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_real() <em>Is real</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_real()
   * @generated
   * @ordered
   */
  protected boolean is_real = IS_REAL_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_list() <em>Is list</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_list()
   * @generated
   * @ordered
   */
  protected static final boolean IS_LIST_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_list() <em>Is list</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_list()
   * @generated
   * @ordered
   */
  protected boolean is_list = IS_LIST_EDEFAULT;

  /**
   * The default value of the '{@link #isSet() <em>Set</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSet()
   * @generated
   * @ordered
   */
  protected static final boolean SET_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSet() <em>Set</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSet()
   * @generated
   * @ordered
   */
  protected boolean set = SET_EDEFAULT;

  /**
   * The default value of the '{@link #isBag() <em>Bag</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBag()
   * @generated
   * @ordered
   */
  protected static final boolean BAG_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBag() <em>Bag</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBag()
   * @generated
   * @ordered
   */
  protected boolean bag = BAG_EDEFAULT;

  /**
   * The default value of the '{@link #isFset() <em>Fset</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFset()
   * @generated
   * @ordered
   */
  protected static final boolean FSET_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFset() <em>Fset</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFset()
   * @generated
   * @ordered
   */
  protected boolean fset = FSET_EDEFAULT;

  /**
   * The default value of the '{@link #isFbag() <em>Fbag</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFbag()
   * @generated
   * @ordered
   */
  protected static final boolean FBAG_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFbag() <em>Fbag</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFbag()
   * @generated
   * @ordered
   */
  protected boolean fbag = FBAG_EDEFAULT;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected SortExpr exp;

  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected SortName id;

  /**
   * The cached value of the '{@link #getConst() <em>Const</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConst()
   * @generated
   * @ordered
   */
  protected ConstrDeclList const_;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SortExprTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclrDslPackage.Literals.SORT_EXPR_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_bool()
  {
    return is_bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_bool(boolean newIs_bool)
  {
    boolean oldIs_bool = is_bool;
    is_bool = newIs_bool;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__IS_BOOL, oldIs_bool, is_bool));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_pos()
  {
    return is_pos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_pos(boolean newIs_pos)
  {
    boolean oldIs_pos = is_pos;
    is_pos = newIs_pos;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__IS_POS, oldIs_pos, is_pos));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_nat()
  {
    return is_nat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_nat(boolean newIs_nat)
  {
    boolean oldIs_nat = is_nat;
    is_nat = newIs_nat;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__IS_NAT, oldIs_nat, is_nat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_int()
  {
    return is_int;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_int(boolean newIs_int)
  {
    boolean oldIs_int = is_int;
    is_int = newIs_int;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__IS_INT, oldIs_int, is_int));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_real()
  {
    return is_real;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_real(boolean newIs_real)
  {
    boolean oldIs_real = is_real;
    is_real = newIs_real;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__IS_REAL, oldIs_real, is_real));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_list()
  {
    return is_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_list(boolean newIs_list)
  {
    boolean oldIs_list = is_list;
    is_list = newIs_list;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__IS_LIST, oldIs_list, is_list));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isSet()
  {
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSet(boolean newSet)
  {
    boolean oldSet = set;
    set = newSet;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__SET, oldSet, set));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isBag()
  {
    return bag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBag(boolean newBag)
  {
    boolean oldBag = bag;
    bag = newBag;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__BAG, oldBag, bag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFset()
  {
    return fset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFset(boolean newFset)
  {
    boolean oldFset = fset;
    fset = newFset;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__FSET, oldFset, fset));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFbag()
  {
    return fbag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFbag(boolean newFbag)
  {
    boolean oldFbag = fbag;
    fbag = newFbag;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__FBAG, oldFbag, fbag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SortExpr getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(SortExpr newExp, NotificationChain msgs)
  {
    SortExpr oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExp(SortExpr newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.SORT_EXPR_TERM__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.SORT_EXPR_TERM__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SortName getId()
  {
    if (id != null && id.eIsProxy())
    {
      InternalEObject oldId = (InternalEObject)id;
      id = (SortName)eResolveProxy(oldId);
      if (id != oldId)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MclrDslPackage.SORT_EXPR_TERM__ID, oldId, id));
      }
    }
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SortName basicGetId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setId(SortName newId)
  {
    SortName oldId = id;
    id = newId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__ID, oldId, id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstrDeclList getConst()
  {
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConst(ConstrDeclList newConst, NotificationChain msgs)
  {
    ConstrDeclList oldConst = const_;
    const_ = newConst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__CONST, oldConst, newConst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConst(ConstrDeclList newConst)
  {
    if (newConst != const_)
    {
      NotificationChain msgs = null;
      if (const_ != null)
        msgs = ((InternalEObject)const_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.SORT_EXPR_TERM__CONST, null, msgs);
      if (newConst != null)
        msgs = ((InternalEObject)newConst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.SORT_EXPR_TERM__CONST, null, msgs);
      msgs = basicSetConst(newConst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.SORT_EXPR_TERM__CONST, newConst, newConst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclrDslPackage.SORT_EXPR_TERM__EXP:
        return basicSetExp(null, msgs);
      case MclrDslPackage.SORT_EXPR_TERM__CONST:
        return basicSetConst(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclrDslPackage.SORT_EXPR_TERM__IS_BOOL:
        return isIs_bool();
      case MclrDslPackage.SORT_EXPR_TERM__IS_POS:
        return isIs_pos();
      case MclrDslPackage.SORT_EXPR_TERM__IS_NAT:
        return isIs_nat();
      case MclrDslPackage.SORT_EXPR_TERM__IS_INT:
        return isIs_int();
      case MclrDslPackage.SORT_EXPR_TERM__IS_REAL:
        return isIs_real();
      case MclrDslPackage.SORT_EXPR_TERM__IS_LIST:
        return isIs_list();
      case MclrDslPackage.SORT_EXPR_TERM__SET:
        return isSet();
      case MclrDslPackage.SORT_EXPR_TERM__BAG:
        return isBag();
      case MclrDslPackage.SORT_EXPR_TERM__FSET:
        return isFset();
      case MclrDslPackage.SORT_EXPR_TERM__FBAG:
        return isFbag();
      case MclrDslPackage.SORT_EXPR_TERM__EXP:
        return getExp();
      case MclrDslPackage.SORT_EXPR_TERM__ID:
        if (resolve) return getId();
        return basicGetId();
      case MclrDslPackage.SORT_EXPR_TERM__CONST:
        return getConst();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclrDslPackage.SORT_EXPR_TERM__IS_BOOL:
        setIs_bool((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_POS:
        setIs_pos((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_NAT:
        setIs_nat((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_INT:
        setIs_int((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_REAL:
        setIs_real((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_LIST:
        setIs_list((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__SET:
        setSet((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__BAG:
        setBag((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__FSET:
        setFset((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__FBAG:
        setFbag((Boolean)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__EXP:
        setExp((SortExpr)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__ID:
        setId((SortName)newValue);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__CONST:
        setConst((ConstrDeclList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.SORT_EXPR_TERM__IS_BOOL:
        setIs_bool(IS_BOOL_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_POS:
        setIs_pos(IS_POS_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_NAT:
        setIs_nat(IS_NAT_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_INT:
        setIs_int(IS_INT_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_REAL:
        setIs_real(IS_REAL_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__IS_LIST:
        setIs_list(IS_LIST_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__SET:
        setSet(SET_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__BAG:
        setBag(BAG_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__FSET:
        setFset(FSET_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__FBAG:
        setFbag(FBAG_EDEFAULT);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__EXP:
        setExp((SortExpr)null);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__ID:
        setId((SortName)null);
        return;
      case MclrDslPackage.SORT_EXPR_TERM__CONST:
        setConst((ConstrDeclList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.SORT_EXPR_TERM__IS_BOOL:
        return is_bool != IS_BOOL_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__IS_POS:
        return is_pos != IS_POS_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__IS_NAT:
        return is_nat != IS_NAT_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__IS_INT:
        return is_int != IS_INT_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__IS_REAL:
        return is_real != IS_REAL_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__IS_LIST:
        return is_list != IS_LIST_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__SET:
        return set != SET_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__BAG:
        return bag != BAG_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__FSET:
        return fset != FSET_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__FBAG:
        return fbag != FBAG_EDEFAULT;
      case MclrDslPackage.SORT_EXPR_TERM__EXP:
        return exp != null;
      case MclrDslPackage.SORT_EXPR_TERM__ID:
        return id != null;
      case MclrDslPackage.SORT_EXPR_TERM__CONST:
        return const_ != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (is_bool: ");
    result.append(is_bool);
    result.append(", is_pos: ");
    result.append(is_pos);
    result.append(", is_nat: ");
    result.append(is_nat);
    result.append(", is_int: ");
    result.append(is_int);
    result.append(", is_real: ");
    result.append(is_real);
    result.append(", is_list: ");
    result.append(is_list);
    result.append(", set: ");
    result.append(set);
    result.append(", bag: ");
    result.append(bag);
    result.append(", fset: ");
    result.append(fset);
    result.append(", fbag: ");
    result.append(fbag);
    result.append(')');
    return result.toString();
  }

} //SortExprTermImpl
