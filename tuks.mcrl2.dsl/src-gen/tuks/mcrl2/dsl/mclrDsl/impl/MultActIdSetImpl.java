/**
 * generated by Xtext 2.11.0.beta2
 */
package tuks.mcrl2.dsl.mclrDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tuks.mcrl2.dsl.mclrDsl.MclrDslPackage;
import tuks.mcrl2.dsl.mclrDsl.MultActIdList;
import tuks.mcrl2.dsl.mclrDsl.MultActIdSet;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mult Act Id Set</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.MultActIdSetImpl#getData <em>Data</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.MultActIdSetImpl#isIs_empty <em>Is empty</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MultActIdSetImpl extends MinimalEObjectImpl.Container implements MultActIdSet
{
  /**
   * The cached value of the '{@link #getData() <em>Data</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getData()
   * @generated
   * @ordered
   */
  protected MultActIdList data;

  /**
   * The default value of the '{@link #isIs_empty() <em>Is empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_empty()
   * @generated
   * @ordered
   */
  protected static final boolean IS_EMPTY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_empty() <em>Is empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_empty()
   * @generated
   * @ordered
   */
  protected boolean is_empty = IS_EMPTY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MultActIdSetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclrDslPackage.Literals.MULT_ACT_ID_SET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MultActIdList getData()
  {
    return data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetData(MultActIdList newData, NotificationChain msgs)
  {
    MultActIdList oldData = data;
    data = newData;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.MULT_ACT_ID_SET__DATA, oldData, newData);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setData(MultActIdList newData)
  {
    if (newData != data)
    {
      NotificationChain msgs = null;
      if (data != null)
        msgs = ((InternalEObject)data).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.MULT_ACT_ID_SET__DATA, null, msgs);
      if (newData != null)
        msgs = ((InternalEObject)newData).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.MULT_ACT_ID_SET__DATA, null, msgs);
      msgs = basicSetData(newData, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.MULT_ACT_ID_SET__DATA, newData, newData));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_empty()
  {
    return is_empty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_empty(boolean newIs_empty)
  {
    boolean oldIs_empty = is_empty;
    is_empty = newIs_empty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.MULT_ACT_ID_SET__IS_EMPTY, oldIs_empty, is_empty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclrDslPackage.MULT_ACT_ID_SET__DATA:
        return basicSetData(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclrDslPackage.MULT_ACT_ID_SET__DATA:
        return getData();
      case MclrDslPackage.MULT_ACT_ID_SET__IS_EMPTY:
        return isIs_empty();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclrDslPackage.MULT_ACT_ID_SET__DATA:
        setData((MultActIdList)newValue);
        return;
      case MclrDslPackage.MULT_ACT_ID_SET__IS_EMPTY:
        setIs_empty((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.MULT_ACT_ID_SET__DATA:
        setData((MultActIdList)null);
        return;
      case MclrDslPackage.MULT_ACT_ID_SET__IS_EMPTY:
        setIs_empty(IS_EMPTY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.MULT_ACT_ID_SET__DATA:
        return data != null;
      case MclrDslPackage.MULT_ACT_ID_SET__IS_EMPTY:
        return is_empty != IS_EMPTY_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (is_empty: ");
    result.append(is_empty);
    result.append(')');
    return result.toString();
  }

} //MultActIdSetImpl
