/**
 * generated by Xtext 2.11.0.beta2
 */
package tuks.mcrl2.dsl.mclrDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import tuks.mcrl2.dsl.mclrDsl.MclrDslPackage;
import tuks.mcrl2.dsl.mclrDsl.ProjDecl;
import tuks.mcrl2.dsl.mclrDsl.ProjDeclList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Proj Decl List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProjDeclListImpl#getProj <em>Proj</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProjDeclListImpl#getProf <em>Prof</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProjDeclListImpl extends MinimalEObjectImpl.Container implements ProjDeclList
{
  /**
   * The cached value of the '{@link #getProj() <em>Proj</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProj()
   * @generated
   * @ordered
   */
  protected EList<ProjDecl> proj;

  /**
   * The cached value of the '{@link #getProf() <em>Prof</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProf()
   * @generated
   * @ordered
   */
  protected EList<ProjDecl> prof;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjDeclListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclrDslPackage.Literals.PROJ_DECL_LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ProjDecl> getProj()
  {
    if (proj == null)
    {
      proj = new EObjectContainmentEList<ProjDecl>(ProjDecl.class, this, MclrDslPackage.PROJ_DECL_LIST__PROJ);
    }
    return proj;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ProjDecl> getProf()
  {
    if (prof == null)
    {
      prof = new EObjectContainmentEList<ProjDecl>(ProjDecl.class, this, MclrDslPackage.PROJ_DECL_LIST__PROF);
    }
    return prof;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROJ_DECL_LIST__PROJ:
        return ((InternalEList<?>)getProj()).basicRemove(otherEnd, msgs);
      case MclrDslPackage.PROJ_DECL_LIST__PROF:
        return ((InternalEList<?>)getProf()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROJ_DECL_LIST__PROJ:
        return getProj();
      case MclrDslPackage.PROJ_DECL_LIST__PROF:
        return getProf();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROJ_DECL_LIST__PROJ:
        getProj().clear();
        getProj().addAll((Collection<? extends ProjDecl>)newValue);
        return;
      case MclrDslPackage.PROJ_DECL_LIST__PROF:
        getProf().clear();
        getProf().addAll((Collection<? extends ProjDecl>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROJ_DECL_LIST__PROJ:
        getProj().clear();
        return;
      case MclrDslPackage.PROJ_DECL_LIST__PROF:
        getProf().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROJ_DECL_LIST__PROJ:
        return proj != null && !proj.isEmpty();
      case MclrDslPackage.PROJ_DECL_LIST__PROF:
        return prof != null && !prof.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ProjDeclListImpl
