/**
 * generated by Xtext 2.11.0.beta2
 */
package tuks.mcrl2.dsl.mclrDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tuks.mcrl2.dsl.mclrDsl.ActIdSet;
import tuks.mcrl2.dsl.mclrDsl.Action;
import tuks.mcrl2.dsl.mclrDsl.AssignmentList;
import tuks.mcrl2.dsl.mclrDsl.MclrDslPackage;
import tuks.mcrl2.dsl.mclrDsl.MultActIdSet;
import tuks.mcrl2.dsl.mclrDsl.ProcExpr;
import tuks.mcrl2.dsl.mclrDsl.ProcExprTerm;
import tuks.mcrl2.dsl.mclrDsl.ProcName;
import tuks.mcrl2.dsl.mclrDsl.SortName;
import tuks.mcrl2.dsl.mclrDsl.VarsDeclList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Proc Expr Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#getAction <em>Action</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#getProc_id <em>Proc id</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#getAss <em>Ass</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#getMap_id <em>Map id</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#isIs_delta <em>Is delta</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#isIs_tau <em>Is tau</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#isIs_block <em>Is block</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#getAct_set <em>Act set</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#getProc_exp <em>Proc exp</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#isIs_allow <em>Is allow</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#getMulti_set <em>Multi set</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#isIs_hide <em>Is hide</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#isIs_grp <em>Is grp</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#isIs_sum <em>Is sum</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprTermImpl#getVariables <em>Variables</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProcExprTermImpl extends MinimalEObjectImpl.Container implements ProcExprTerm
{
  /**
   * The cached value of the '{@link #getAction() <em>Action</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAction()
   * @generated
   * @ordered
   */
  protected Action action;

  /**
   * The cached value of the '{@link #getProc_id() <em>Proc id</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProc_id()
   * @generated
   * @ordered
   */
  protected ProcName proc_id;

  /**
   * The cached value of the '{@link #getAss() <em>Ass</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAss()
   * @generated
   * @ordered
   */
  protected AssignmentList ass;

  /**
   * The cached value of the '{@link #getMap_id() <em>Map id</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMap_id()
   * @generated
   * @ordered
   */
  protected SortName map_id;

  /**
   * The default value of the '{@link #isIs_delta() <em>Is delta</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_delta()
   * @generated
   * @ordered
   */
  protected static final boolean IS_DELTA_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_delta() <em>Is delta</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_delta()
   * @generated
   * @ordered
   */
  protected boolean is_delta = IS_DELTA_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_tau() <em>Is tau</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_tau()
   * @generated
   * @ordered
   */
  protected static final boolean IS_TAU_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_tau() <em>Is tau</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_tau()
   * @generated
   * @ordered
   */
  protected boolean is_tau = IS_TAU_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_block() <em>Is block</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_block()
   * @generated
   * @ordered
   */
  protected static final boolean IS_BLOCK_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_block() <em>Is block</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_block()
   * @generated
   * @ordered
   */
  protected boolean is_block = IS_BLOCK_EDEFAULT;

  /**
   * The cached value of the '{@link #getAct_set() <em>Act set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAct_set()
   * @generated
   * @ordered
   */
  protected ActIdSet act_set;

  /**
   * The cached value of the '{@link #getProc_exp() <em>Proc exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProc_exp()
   * @generated
   * @ordered
   */
  protected ProcExpr proc_exp;

  /**
   * The default value of the '{@link #isIs_allow() <em>Is allow</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_allow()
   * @generated
   * @ordered
   */
  protected static final boolean IS_ALLOW_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_allow() <em>Is allow</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_allow()
   * @generated
   * @ordered
   */
  protected boolean is_allow = IS_ALLOW_EDEFAULT;

  /**
   * The cached value of the '{@link #getMulti_set() <em>Multi set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMulti_set()
   * @generated
   * @ordered
   */
  protected MultActIdSet multi_set;

  /**
   * The default value of the '{@link #isIs_hide() <em>Is hide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_hide()
   * @generated
   * @ordered
   */
  protected static final boolean IS_HIDE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_hide() <em>Is hide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_hide()
   * @generated
   * @ordered
   */
  protected boolean is_hide = IS_HIDE_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_grp() <em>Is grp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_grp()
   * @generated
   * @ordered
   */
  protected static final boolean IS_GRP_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_grp() <em>Is grp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_grp()
   * @generated
   * @ordered
   */
  protected boolean is_grp = IS_GRP_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_sum() <em>Is sum</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_sum()
   * @generated
   * @ordered
   */
  protected static final boolean IS_SUM_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_sum() <em>Is sum</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_sum()
   * @generated
   * @ordered
   */
  protected boolean is_sum = IS_SUM_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected VarsDeclList variables;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcExprTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclrDslPackage.Literals.PROC_EXPR_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action getAction()
  {
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAction(Action newAction, NotificationChain msgs)
  {
    Action oldAction = action;
    action = newAction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__ACTION, oldAction, newAction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAction(Action newAction)
  {
    if (newAction != action)
    {
      NotificationChain msgs = null;
      if (action != null)
        msgs = ((InternalEObject)action).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__ACTION, null, msgs);
      if (newAction != null)
        msgs = ((InternalEObject)newAction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__ACTION, null, msgs);
      msgs = basicSetAction(newAction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__ACTION, newAction, newAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcName getProc_id()
  {
    if (proc_id != null && proc_id.eIsProxy())
    {
      InternalEObject oldProc_id = (InternalEObject)proc_id;
      proc_id = (ProcName)eResolveProxy(oldProc_id);
      if (proc_id != oldProc_id)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MclrDslPackage.PROC_EXPR_TERM__PROC_ID, oldProc_id, proc_id));
      }
    }
    return proc_id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcName basicGetProc_id()
  {
    return proc_id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProc_id(ProcName newProc_id)
  {
    ProcName oldProc_id = proc_id;
    proc_id = newProc_id;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__PROC_ID, oldProc_id, proc_id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentList getAss()
  {
    return ass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAss(AssignmentList newAss, NotificationChain msgs)
  {
    AssignmentList oldAss = ass;
    ass = newAss;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__ASS, oldAss, newAss);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAss(AssignmentList newAss)
  {
    if (newAss != ass)
    {
      NotificationChain msgs = null;
      if (ass != null)
        msgs = ((InternalEObject)ass).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__ASS, null, msgs);
      if (newAss != null)
        msgs = ((InternalEObject)newAss).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__ASS, null, msgs);
      msgs = basicSetAss(newAss, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__ASS, newAss, newAss));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SortName getMap_id()
  {
    if (map_id != null && map_id.eIsProxy())
    {
      InternalEObject oldMap_id = (InternalEObject)map_id;
      map_id = (SortName)eResolveProxy(oldMap_id);
      if (map_id != oldMap_id)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MclrDslPackage.PROC_EXPR_TERM__MAP_ID, oldMap_id, map_id));
      }
    }
    return map_id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SortName basicGetMap_id()
  {
    return map_id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMap_id(SortName newMap_id)
  {
    SortName oldMap_id = map_id;
    map_id = newMap_id;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__MAP_ID, oldMap_id, map_id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_delta()
  {
    return is_delta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_delta(boolean newIs_delta)
  {
    boolean oldIs_delta = is_delta;
    is_delta = newIs_delta;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__IS_DELTA, oldIs_delta, is_delta));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_tau()
  {
    return is_tau;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_tau(boolean newIs_tau)
  {
    boolean oldIs_tau = is_tau;
    is_tau = newIs_tau;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__IS_TAU, oldIs_tau, is_tau));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_block()
  {
    return is_block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_block(boolean newIs_block)
  {
    boolean oldIs_block = is_block;
    is_block = newIs_block;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__IS_BLOCK, oldIs_block, is_block));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActIdSet getAct_set()
  {
    return act_set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAct_set(ActIdSet newAct_set, NotificationChain msgs)
  {
    ActIdSet oldAct_set = act_set;
    act_set = newAct_set;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__ACT_SET, oldAct_set, newAct_set);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAct_set(ActIdSet newAct_set)
  {
    if (newAct_set != act_set)
    {
      NotificationChain msgs = null;
      if (act_set != null)
        msgs = ((InternalEObject)act_set).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__ACT_SET, null, msgs);
      if (newAct_set != null)
        msgs = ((InternalEObject)newAct_set).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__ACT_SET, null, msgs);
      msgs = basicSetAct_set(newAct_set, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__ACT_SET, newAct_set, newAct_set));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcExpr getProc_exp()
  {
    return proc_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProc_exp(ProcExpr newProc_exp, NotificationChain msgs)
  {
    ProcExpr oldProc_exp = proc_exp;
    proc_exp = newProc_exp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__PROC_EXP, oldProc_exp, newProc_exp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProc_exp(ProcExpr newProc_exp)
  {
    if (newProc_exp != proc_exp)
    {
      NotificationChain msgs = null;
      if (proc_exp != null)
        msgs = ((InternalEObject)proc_exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__PROC_EXP, null, msgs);
      if (newProc_exp != null)
        msgs = ((InternalEObject)newProc_exp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__PROC_EXP, null, msgs);
      msgs = basicSetProc_exp(newProc_exp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__PROC_EXP, newProc_exp, newProc_exp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_allow()
  {
    return is_allow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_allow(boolean newIs_allow)
  {
    boolean oldIs_allow = is_allow;
    is_allow = newIs_allow;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__IS_ALLOW, oldIs_allow, is_allow));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MultActIdSet getMulti_set()
  {
    return multi_set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMulti_set(MultActIdSet newMulti_set, NotificationChain msgs)
  {
    MultActIdSet oldMulti_set = multi_set;
    multi_set = newMulti_set;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__MULTI_SET, oldMulti_set, newMulti_set);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMulti_set(MultActIdSet newMulti_set)
  {
    if (newMulti_set != multi_set)
    {
      NotificationChain msgs = null;
      if (multi_set != null)
        msgs = ((InternalEObject)multi_set).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__MULTI_SET, null, msgs);
      if (newMulti_set != null)
        msgs = ((InternalEObject)newMulti_set).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__MULTI_SET, null, msgs);
      msgs = basicSetMulti_set(newMulti_set, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__MULTI_SET, newMulti_set, newMulti_set));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_hide()
  {
    return is_hide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_hide(boolean newIs_hide)
  {
    boolean oldIs_hide = is_hide;
    is_hide = newIs_hide;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__IS_HIDE, oldIs_hide, is_hide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_grp()
  {
    return is_grp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_grp(boolean newIs_grp)
  {
    boolean oldIs_grp = is_grp;
    is_grp = newIs_grp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__IS_GRP, oldIs_grp, is_grp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_sum()
  {
    return is_sum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_sum(boolean newIs_sum)
  {
    boolean oldIs_sum = is_sum;
    is_sum = newIs_sum;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__IS_SUM, oldIs_sum, is_sum));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarsDeclList getVariables()
  {
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariables(VarsDeclList newVariables, NotificationChain msgs)
  {
    VarsDeclList oldVariables = variables;
    variables = newVariables;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__VARIABLES, oldVariables, newVariables);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariables(VarsDeclList newVariables)
  {
    if (newVariables != variables)
    {
      NotificationChain msgs = null;
      if (variables != null)
        msgs = ((InternalEObject)variables).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__VARIABLES, null, msgs);
      if (newVariables != null)
        msgs = ((InternalEObject)newVariables).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR_TERM__VARIABLES, null, msgs);
      msgs = basicSetVariables(newVariables, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR_TERM__VARIABLES, newVariables, newVariables));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR_TERM__ACTION:
        return basicSetAction(null, msgs);
      case MclrDslPackage.PROC_EXPR_TERM__ASS:
        return basicSetAss(null, msgs);
      case MclrDslPackage.PROC_EXPR_TERM__ACT_SET:
        return basicSetAct_set(null, msgs);
      case MclrDslPackage.PROC_EXPR_TERM__PROC_EXP:
        return basicSetProc_exp(null, msgs);
      case MclrDslPackage.PROC_EXPR_TERM__MULTI_SET:
        return basicSetMulti_set(null, msgs);
      case MclrDslPackage.PROC_EXPR_TERM__VARIABLES:
        return basicSetVariables(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR_TERM__ACTION:
        return getAction();
      case MclrDslPackage.PROC_EXPR_TERM__PROC_ID:
        if (resolve) return getProc_id();
        return basicGetProc_id();
      case MclrDslPackage.PROC_EXPR_TERM__ASS:
        return getAss();
      case MclrDslPackage.PROC_EXPR_TERM__MAP_ID:
        if (resolve) return getMap_id();
        return basicGetMap_id();
      case MclrDslPackage.PROC_EXPR_TERM__IS_DELTA:
        return isIs_delta();
      case MclrDslPackage.PROC_EXPR_TERM__IS_TAU:
        return isIs_tau();
      case MclrDslPackage.PROC_EXPR_TERM__IS_BLOCK:
        return isIs_block();
      case MclrDslPackage.PROC_EXPR_TERM__ACT_SET:
        return getAct_set();
      case MclrDslPackage.PROC_EXPR_TERM__PROC_EXP:
        return getProc_exp();
      case MclrDslPackage.PROC_EXPR_TERM__IS_ALLOW:
        return isIs_allow();
      case MclrDslPackage.PROC_EXPR_TERM__MULTI_SET:
        return getMulti_set();
      case MclrDslPackage.PROC_EXPR_TERM__IS_HIDE:
        return isIs_hide();
      case MclrDslPackage.PROC_EXPR_TERM__IS_GRP:
        return isIs_grp();
      case MclrDslPackage.PROC_EXPR_TERM__IS_SUM:
        return isIs_sum();
      case MclrDslPackage.PROC_EXPR_TERM__VARIABLES:
        return getVariables();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR_TERM__ACTION:
        setAction((Action)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__PROC_ID:
        setProc_id((ProcName)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__ASS:
        setAss((AssignmentList)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__MAP_ID:
        setMap_id((SortName)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_DELTA:
        setIs_delta((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_TAU:
        setIs_tau((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_BLOCK:
        setIs_block((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__ACT_SET:
        setAct_set((ActIdSet)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__PROC_EXP:
        setProc_exp((ProcExpr)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_ALLOW:
        setIs_allow((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__MULTI_SET:
        setMulti_set((MultActIdSet)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_HIDE:
        setIs_hide((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_GRP:
        setIs_grp((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_SUM:
        setIs_sum((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__VARIABLES:
        setVariables((VarsDeclList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR_TERM__ACTION:
        setAction((Action)null);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__PROC_ID:
        setProc_id((ProcName)null);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__ASS:
        setAss((AssignmentList)null);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__MAP_ID:
        setMap_id((SortName)null);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_DELTA:
        setIs_delta(IS_DELTA_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_TAU:
        setIs_tau(IS_TAU_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_BLOCK:
        setIs_block(IS_BLOCK_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__ACT_SET:
        setAct_set((ActIdSet)null);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__PROC_EXP:
        setProc_exp((ProcExpr)null);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_ALLOW:
        setIs_allow(IS_ALLOW_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__MULTI_SET:
        setMulti_set((MultActIdSet)null);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_HIDE:
        setIs_hide(IS_HIDE_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_GRP:
        setIs_grp(IS_GRP_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__IS_SUM:
        setIs_sum(IS_SUM_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR_TERM__VARIABLES:
        setVariables((VarsDeclList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR_TERM__ACTION:
        return action != null;
      case MclrDslPackage.PROC_EXPR_TERM__PROC_ID:
        return proc_id != null;
      case MclrDslPackage.PROC_EXPR_TERM__ASS:
        return ass != null;
      case MclrDslPackage.PROC_EXPR_TERM__MAP_ID:
        return map_id != null;
      case MclrDslPackage.PROC_EXPR_TERM__IS_DELTA:
        return is_delta != IS_DELTA_EDEFAULT;
      case MclrDslPackage.PROC_EXPR_TERM__IS_TAU:
        return is_tau != IS_TAU_EDEFAULT;
      case MclrDslPackage.PROC_EXPR_TERM__IS_BLOCK:
        return is_block != IS_BLOCK_EDEFAULT;
      case MclrDslPackage.PROC_EXPR_TERM__ACT_SET:
        return act_set != null;
      case MclrDslPackage.PROC_EXPR_TERM__PROC_EXP:
        return proc_exp != null;
      case MclrDslPackage.PROC_EXPR_TERM__IS_ALLOW:
        return is_allow != IS_ALLOW_EDEFAULT;
      case MclrDslPackage.PROC_EXPR_TERM__MULTI_SET:
        return multi_set != null;
      case MclrDslPackage.PROC_EXPR_TERM__IS_HIDE:
        return is_hide != IS_HIDE_EDEFAULT;
      case MclrDslPackage.PROC_EXPR_TERM__IS_GRP:
        return is_grp != IS_GRP_EDEFAULT;
      case MclrDslPackage.PROC_EXPR_TERM__IS_SUM:
        return is_sum != IS_SUM_EDEFAULT;
      case MclrDslPackage.PROC_EXPR_TERM__VARIABLES:
        return variables != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (is_delta: ");
    result.append(is_delta);
    result.append(", is_tau: ");
    result.append(is_tau);
    result.append(", is_block: ");
    result.append(is_block);
    result.append(", is_allow: ");
    result.append(is_allow);
    result.append(", is_hide: ");
    result.append(is_hide);
    result.append(", is_grp: ");
    result.append(is_grp);
    result.append(", is_sum: ");
    result.append(is_sum);
    result.append(')');
    return result.toString();
  }

} //ProcExprTermImpl
