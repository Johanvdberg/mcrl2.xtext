/**
 * generated by Xtext 2.11.0.beta2
 */
package tuks.mcrl2.dsl.mclrDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tuks.mcrl2.dsl.mclrDsl.DataExprUnit;
import tuks.mcrl2.dsl.mclrDsl.MclrDslPackage;
import tuks.mcrl2.dsl.mclrDsl.ProcExpr;
import tuks.mcrl2.dsl.mclrDsl.ProcExprTerm;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Proc Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#isIs_plus <em>Is plus</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#isIs_par <em>Is par</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#isIs_par_right <em>Is par right</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#isIs_left_shist <em>Is left shist</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#isIs_point <em>Is point</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#isIs_or <em>Is or</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#getRight <em>Right</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#isIs_at <em>Is at</em>}</li>
 *   <li>{@link tuks.mcrl2.dsl.mclrDsl.impl.ProcExprImpl#getUnit_right <em>Unit right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProcExprImpl extends MinimalEObjectImpl.Container implements ProcExpr
{
  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected ProcExprTerm left;

  /**
   * The default value of the '{@link #isIs_plus() <em>Is plus</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_plus()
   * @generated
   * @ordered
   */
  protected static final boolean IS_PLUS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_plus() <em>Is plus</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_plus()
   * @generated
   * @ordered
   */
  protected boolean is_plus = IS_PLUS_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_par() <em>Is par</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_par()
   * @generated
   * @ordered
   */
  protected static final boolean IS_PAR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_par() <em>Is par</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_par()
   * @generated
   * @ordered
   */
  protected boolean is_par = IS_PAR_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_par_right() <em>Is par right</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_par_right()
   * @generated
   * @ordered
   */
  protected static final boolean IS_PAR_RIGHT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_par_right() <em>Is par right</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_par_right()
   * @generated
   * @ordered
   */
  protected boolean is_par_right = IS_PAR_RIGHT_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_left_shist() <em>Is left shist</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_left_shist()
   * @generated
   * @ordered
   */
  protected static final boolean IS_LEFT_SHIST_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_left_shist() <em>Is left shist</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_left_shist()
   * @generated
   * @ordered
   */
  protected boolean is_left_shist = IS_LEFT_SHIST_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_point() <em>Is point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_point()
   * @generated
   * @ordered
   */
  protected static final boolean IS_POINT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_point() <em>Is point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_point()
   * @generated
   * @ordered
   */
  protected boolean is_point = IS_POINT_EDEFAULT;

  /**
   * The default value of the '{@link #isIs_or() <em>Is or</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_or()
   * @generated
   * @ordered
   */
  protected static final boolean IS_OR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_or() <em>Is or</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_or()
   * @generated
   * @ordered
   */
  protected boolean is_or = IS_OR_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected ProcExpr right;

  /**
   * The default value of the '{@link #isIs_at() <em>Is at</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_at()
   * @generated
   * @ordered
   */
  protected static final boolean IS_AT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_at() <em>Is at</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_at()
   * @generated
   * @ordered
   */
  protected boolean is_at = IS_AT_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnit_right() <em>Unit right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit_right()
   * @generated
   * @ordered
   */
  protected DataExprUnit unit_right;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclrDslPackage.Literals.PROC_EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcExprTerm getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(ProcExprTerm newLeft, NotificationChain msgs)
  {
    ProcExprTerm oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(ProcExprTerm newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_plus()
  {
    return is_plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_plus(boolean newIs_plus)
  {
    boolean oldIs_plus = is_plus;
    is_plus = newIs_plus;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__IS_PLUS, oldIs_plus, is_plus));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_par()
  {
    return is_par;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_par(boolean newIs_par)
  {
    boolean oldIs_par = is_par;
    is_par = newIs_par;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__IS_PAR, oldIs_par, is_par));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_par_right()
  {
    return is_par_right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_par_right(boolean newIs_par_right)
  {
    boolean oldIs_par_right = is_par_right;
    is_par_right = newIs_par_right;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__IS_PAR_RIGHT, oldIs_par_right, is_par_right));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_left_shist()
  {
    return is_left_shist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_left_shist(boolean newIs_left_shist)
  {
    boolean oldIs_left_shist = is_left_shist;
    is_left_shist = newIs_left_shist;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__IS_LEFT_SHIST, oldIs_left_shist, is_left_shist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_point()
  {
    return is_point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_point(boolean newIs_point)
  {
    boolean oldIs_point = is_point;
    is_point = newIs_point;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__IS_POINT, oldIs_point, is_point));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_or()
  {
    return is_or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_or(boolean newIs_or)
  {
    boolean oldIs_or = is_or;
    is_or = newIs_or;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__IS_OR, oldIs_or, is_or));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcExpr getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(ProcExpr newRight, NotificationChain msgs)
  {
    ProcExpr oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight(ProcExpr newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_at()
  {
    return is_at;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_at(boolean newIs_at)
  {
    boolean oldIs_at = is_at;
    is_at = newIs_at;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__IS_AT, oldIs_at, is_at));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataExprUnit getUnit_right()
  {
    return unit_right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnit_right(DataExprUnit newUnit_right, NotificationChain msgs)
  {
    DataExprUnit oldUnit_right = unit_right;
    unit_right = newUnit_right;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__UNIT_RIGHT, oldUnit_right, newUnit_right);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnit_right(DataExprUnit newUnit_right)
  {
    if (newUnit_right != unit_right)
    {
      NotificationChain msgs = null;
      if (unit_right != null)
        msgs = ((InternalEObject)unit_right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR__UNIT_RIGHT, null, msgs);
      if (newUnit_right != null)
        msgs = ((InternalEObject)newUnit_right).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclrDslPackage.PROC_EXPR__UNIT_RIGHT, null, msgs);
      msgs = basicSetUnit_right(newUnit_right, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclrDslPackage.PROC_EXPR__UNIT_RIGHT, newUnit_right, newUnit_right));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR__LEFT:
        return basicSetLeft(null, msgs);
      case MclrDslPackage.PROC_EXPR__RIGHT:
        return basicSetRight(null, msgs);
      case MclrDslPackage.PROC_EXPR__UNIT_RIGHT:
        return basicSetUnit_right(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR__LEFT:
        return getLeft();
      case MclrDslPackage.PROC_EXPR__IS_PLUS:
        return isIs_plus();
      case MclrDslPackage.PROC_EXPR__IS_PAR:
        return isIs_par();
      case MclrDslPackage.PROC_EXPR__IS_PAR_RIGHT:
        return isIs_par_right();
      case MclrDslPackage.PROC_EXPR__IS_LEFT_SHIST:
        return isIs_left_shist();
      case MclrDslPackage.PROC_EXPR__IS_POINT:
        return isIs_point();
      case MclrDslPackage.PROC_EXPR__IS_OR:
        return isIs_or();
      case MclrDslPackage.PROC_EXPR__RIGHT:
        return getRight();
      case MclrDslPackage.PROC_EXPR__IS_AT:
        return isIs_at();
      case MclrDslPackage.PROC_EXPR__UNIT_RIGHT:
        return getUnit_right();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR__LEFT:
        setLeft((ProcExprTerm)newValue);
        return;
      case MclrDslPackage.PROC_EXPR__IS_PLUS:
        setIs_plus((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR__IS_PAR:
        setIs_par((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR__IS_PAR_RIGHT:
        setIs_par_right((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR__IS_LEFT_SHIST:
        setIs_left_shist((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR__IS_POINT:
        setIs_point((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR__IS_OR:
        setIs_or((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR__RIGHT:
        setRight((ProcExpr)newValue);
        return;
      case MclrDslPackage.PROC_EXPR__IS_AT:
        setIs_at((Boolean)newValue);
        return;
      case MclrDslPackage.PROC_EXPR__UNIT_RIGHT:
        setUnit_right((DataExprUnit)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR__LEFT:
        setLeft((ProcExprTerm)null);
        return;
      case MclrDslPackage.PROC_EXPR__IS_PLUS:
        setIs_plus(IS_PLUS_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR__IS_PAR:
        setIs_par(IS_PAR_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR__IS_PAR_RIGHT:
        setIs_par_right(IS_PAR_RIGHT_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR__IS_LEFT_SHIST:
        setIs_left_shist(IS_LEFT_SHIST_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR__IS_POINT:
        setIs_point(IS_POINT_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR__IS_OR:
        setIs_or(IS_OR_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR__RIGHT:
        setRight((ProcExpr)null);
        return;
      case MclrDslPackage.PROC_EXPR__IS_AT:
        setIs_at(IS_AT_EDEFAULT);
        return;
      case MclrDslPackage.PROC_EXPR__UNIT_RIGHT:
        setUnit_right((DataExprUnit)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclrDslPackage.PROC_EXPR__LEFT:
        return left != null;
      case MclrDslPackage.PROC_EXPR__IS_PLUS:
        return is_plus != IS_PLUS_EDEFAULT;
      case MclrDslPackage.PROC_EXPR__IS_PAR:
        return is_par != IS_PAR_EDEFAULT;
      case MclrDslPackage.PROC_EXPR__IS_PAR_RIGHT:
        return is_par_right != IS_PAR_RIGHT_EDEFAULT;
      case MclrDslPackage.PROC_EXPR__IS_LEFT_SHIST:
        return is_left_shist != IS_LEFT_SHIST_EDEFAULT;
      case MclrDslPackage.PROC_EXPR__IS_POINT:
        return is_point != IS_POINT_EDEFAULT;
      case MclrDslPackage.PROC_EXPR__IS_OR:
        return is_or != IS_OR_EDEFAULT;
      case MclrDslPackage.PROC_EXPR__RIGHT:
        return right != null;
      case MclrDslPackage.PROC_EXPR__IS_AT:
        return is_at != IS_AT_EDEFAULT;
      case MclrDslPackage.PROC_EXPR__UNIT_RIGHT:
        return unit_right != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (is_plus: ");
    result.append(is_plus);
    result.append(", is_par: ");
    result.append(is_par);
    result.append(", is_par_right: ");
    result.append(is_par_right);
    result.append(", is_left_shist: ");
    result.append(is_left_shist);
    result.append(", is_point: ");
    result.append(is_point);
    result.append(", is_or: ");
    result.append(is_or);
    result.append(", is_at: ");
    result.append(is_at);
    result.append(')');
    return result.toString();
  }

} //ProcExprImpl
