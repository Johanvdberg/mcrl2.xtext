/*
 * generated by Xtext 2.11.0.beta2
 */
package tuks.mcrl2.dsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import tuks.mcrl2.dsl.services.MclrDslGrammarAccess;

@SuppressWarnings("all")
public class MclrDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MclrDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_DataExpr1_AsteriskKeyword_1_0_0_5_or_DivKeyword_1_0_0_3_or_HyphenMinusKeyword_1_0_0_1_or_ModKeyword_1_0_0_4_or_PlusSignKeyword_1_0_0_0_or_SolidusKeyword_1_0_0_2;
	protected AbstractElementAlias match_DataExpr2_AmpersandAmpersandKeyword_1_0_0_2_or_EqualsSignEqualsSignKeyword_1_0_0_3_or_EqualsSignGreaterThanSignKeyword_1_0_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_0_4_or_FullStopKeyword_1_0_0_13_or_GreaterThanSignEqualsSignKeyword_1_0_0_7_or_GreaterThanSignKeyword_1_0_0_8_or_InKeyword_1_0_0_9_or_LessThanSignEqualsSignKeyword_1_0_0_6_or_LessThanSignKeyword_1_0_0_5_or_LessThanSignVerticalLineKeyword_1_0_0_11_or_PlusSignPlusSignKeyword_1_0_0_12_or_VerticalLineGreaterThanSignKeyword_1_0_0_10_or_VerticalLineVerticalLineKeyword_1_0_0_1;
	protected AbstractElementAlias match_SortExpr_HyphenMinusGreaterThanSignKeyword_1_0_or_NumberSignKeyword_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MclrDslGrammarAccess) access;
		match_DataExpr1_AsteriskKeyword_1_0_0_5_or_DivKeyword_1_0_0_3_or_HyphenMinusKeyword_1_0_0_1_or_ModKeyword_1_0_0_4_or_PlusSignKeyword_1_0_0_0_or_SolidusKeyword_1_0_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDataExpr1Access().getAsteriskKeyword_1_0_0_5()), new TokenAlias(false, false, grammarAccess.getDataExpr1Access().getDivKeyword_1_0_0_3()), new TokenAlias(false, false, grammarAccess.getDataExpr1Access().getHyphenMinusKeyword_1_0_0_1()), new TokenAlias(false, false, grammarAccess.getDataExpr1Access().getModKeyword_1_0_0_4()), new TokenAlias(false, false, grammarAccess.getDataExpr1Access().getPlusSignKeyword_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getDataExpr1Access().getSolidusKeyword_1_0_0_2()));
		match_DataExpr2_AmpersandAmpersandKeyword_1_0_0_2_or_EqualsSignEqualsSignKeyword_1_0_0_3_or_EqualsSignGreaterThanSignKeyword_1_0_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_0_4_or_FullStopKeyword_1_0_0_13_or_GreaterThanSignEqualsSignKeyword_1_0_0_7_or_GreaterThanSignKeyword_1_0_0_8_or_InKeyword_1_0_0_9_or_LessThanSignEqualsSignKeyword_1_0_0_6_or_LessThanSignKeyword_1_0_0_5_or_LessThanSignVerticalLineKeyword_1_0_0_11_or_PlusSignPlusSignKeyword_1_0_0_12_or_VerticalLineGreaterThanSignKeyword_1_0_0_10_or_VerticalLineVerticalLineKeyword_1_0_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getAmpersandAmpersandKeyword_1_0_0_2()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getEqualsSignEqualsSignKeyword_1_0_0_3()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getEqualsSignGreaterThanSignKeyword_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getExclamationMarkEqualsSignKeyword_1_0_0_4()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getFullStopKeyword_1_0_0_13()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getGreaterThanSignEqualsSignKeyword_1_0_0_7()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getGreaterThanSignKeyword_1_0_0_8()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getInKeyword_1_0_0_9()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getLessThanSignEqualsSignKeyword_1_0_0_6()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getLessThanSignKeyword_1_0_0_5()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getLessThanSignVerticalLineKeyword_1_0_0_11()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getPlusSignPlusSignKeyword_1_0_0_12()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getVerticalLineGreaterThanSignKeyword_1_0_0_10()), new TokenAlias(false, false, grammarAccess.getDataExpr2Access().getVerticalLineVerticalLineKeyword_1_0_0_1()));
		match_SortExpr_HyphenMinusGreaterThanSignKeyword_1_0_or_NumberSignKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSortExprAccess().getHyphenMinusGreaterThanSignKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getSortExprAccess().getNumberSignKeyword_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal WS			: (' '|'\t'|'\r'|'\n')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_DataExpr1_AsteriskKeyword_1_0_0_5_or_DivKeyword_1_0_0_3_or_HyphenMinusKeyword_1_0_0_1_or_ModKeyword_1_0_0_4_or_PlusSignKeyword_1_0_0_0_or_SolidusKeyword_1_0_0_2.equals(syntax))
				emit_DataExpr1_AsteriskKeyword_1_0_0_5_or_DivKeyword_1_0_0_3_or_HyphenMinusKeyword_1_0_0_1_or_ModKeyword_1_0_0_4_or_PlusSignKeyword_1_0_0_0_or_SolidusKeyword_1_0_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DataExpr2_AmpersandAmpersandKeyword_1_0_0_2_or_EqualsSignEqualsSignKeyword_1_0_0_3_or_EqualsSignGreaterThanSignKeyword_1_0_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_0_4_or_FullStopKeyword_1_0_0_13_or_GreaterThanSignEqualsSignKeyword_1_0_0_7_or_GreaterThanSignKeyword_1_0_0_8_or_InKeyword_1_0_0_9_or_LessThanSignEqualsSignKeyword_1_0_0_6_or_LessThanSignKeyword_1_0_0_5_or_LessThanSignVerticalLineKeyword_1_0_0_11_or_PlusSignPlusSignKeyword_1_0_0_12_or_VerticalLineGreaterThanSignKeyword_1_0_0_10_or_VerticalLineVerticalLineKeyword_1_0_0_1.equals(syntax))
				emit_DataExpr2_AmpersandAmpersandKeyword_1_0_0_2_or_EqualsSignEqualsSignKeyword_1_0_0_3_or_EqualsSignGreaterThanSignKeyword_1_0_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_0_4_or_FullStopKeyword_1_0_0_13_or_GreaterThanSignEqualsSignKeyword_1_0_0_7_or_GreaterThanSignKeyword_1_0_0_8_or_InKeyword_1_0_0_9_or_LessThanSignEqualsSignKeyword_1_0_0_6_or_LessThanSignKeyword_1_0_0_5_or_LessThanSignVerticalLineKeyword_1_0_0_11_or_PlusSignPlusSignKeyword_1_0_0_12_or_VerticalLineGreaterThanSignKeyword_1_0_0_10_or_VerticalLineVerticalLineKeyword_1_0_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SortExpr_HyphenMinusGreaterThanSignKeyword_1_0_or_NumberSignKeyword_1_1.equals(syntax))
				emit_SortExpr_HyphenMinusGreaterThanSignKeyword_1_0_or_NumberSignKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (
	  *         '+' | 
	  *         '-' | 
	  *         '/' | 
	  *         'div' | 
	  *         'mod' | 
	  *         '*'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     left=DataExpr2 (ambiguity) right=DataExpr
	 */
	protected void emit_DataExpr1_AsteriskKeyword_1_0_0_5_or_DivKeyword_1_0_0_3_or_HyphenMinusKeyword_1_0_0_1_or_ModKeyword_1_0_0_4_or_PlusSignKeyword_1_0_0_0_or_SolidusKeyword_1_0_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '=>' | 
	  *         '||' | 
	  *         '&&' | 
	  *         '==' | 
	  *         '!=' | 
	  *         '<' | 
	  *         '<=' | 
	  *         '>=' | 
	  *         '>' | 
	  *         'in' | 
	  *         '|>' | 
	  *         '<|' | 
	  *         '++' | 
	  *         '.'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     left=DataExprTerm (ambiguity) right=DataExpr
	 */
	protected void emit_DataExpr2_AmpersandAmpersandKeyword_1_0_0_2_or_EqualsSignEqualsSignKeyword_1_0_0_3_or_EqualsSignGreaterThanSignKeyword_1_0_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_0_4_or_FullStopKeyword_1_0_0_13_or_GreaterThanSignEqualsSignKeyword_1_0_0_7_or_GreaterThanSignKeyword_1_0_0_8_or_InKeyword_1_0_0_9_or_LessThanSignEqualsSignKeyword_1_0_0_6_or_LessThanSignKeyword_1_0_0_5_or_LessThanSignVerticalLineKeyword_1_0_0_11_or_PlusSignPlusSignKeyword_1_0_0_12_or_VerticalLineGreaterThanSignKeyword_1_0_0_10_or_VerticalLineVerticalLineKeyword_1_0_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '->' | '#'
	 *
	 * This ambiguous syntax occurs at:
	 *     left=SortExprTerm (ambiguity) right=SortExpr
	 */
	protected void emit_SortExpr_HyphenMinusGreaterThanSignKeyword_1_0_or_NumberSignKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
