/*
 * generated by Xtext 2.11.0.RC2
 */
grammar InternalMultiNameDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package test.multiname.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package test.multiname.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import test.multiname.dsl.services.MultiNameDslGrammarAccess;

}

@parser::members {

 	private MultiNameDslGrammarAccess grammarAccess;

    public InternalMultiNameDslParser(TokenStream input, MultiNameDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MultiNameDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getModulesModuleParserRuleCall_0());
			}
			lv_modules_0_0=ruleModule
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"modules",
					lv_modules_0_0,
					"test.multiname.dsl.MultiNameDsl.Module");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	iv_ruleModule=ruleModule
	{ $current=$iv_ruleModule.current; }
	EOF;

// Rule Module
ruleModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin module'
		{
			newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getBeginModuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getVarsVarsParserRuleCall_2_0());
				}
				lv_vars_2_0=ruleVars
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					add(
						$current,
						"vars",
						lv_vars_2_0,
						"test.multiname.dsl.MultiNameDsl.Vars");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getFuncsFuncsParserRuleCall_3_0());
				}
				lv_funcs_3_0=ruleFuncs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					add(
						$current,
						"funcs",
						lv_funcs_3_0,
						"test.multiname.dsl.MultiNameDsl.Funcs");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end_module'
		{
			newLeafNode(otherlv_4, grammarAccess.getModuleAccess().getEnd_moduleKeyword_4());
		}
	)
;

// Entry rule entryRuleVarName
entryRuleVarName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarNameRule()); }
	iv_ruleVarName=ruleVarName
	{ $current=$iv_ruleVarName.current; }
	EOF;

// Rule VarName
ruleVarName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVarNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFuncName
entryRuleFuncName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncNameRule()); }
	iv_ruleFuncName=ruleFuncName
	{ $current=$iv_ruleFuncName.current; }
	EOF;

// Rule FuncName
ruleFuncName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFuncNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFuncNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFuncs
entryRuleFuncs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncsRule()); }
	iv_ruleFuncs=ruleFuncs
	{ $current=$iv_ruleFuncs.current; }
	EOF;

// Rule Funcs
ruleFuncs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFuncsAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncsAccess().getLeftFuncNameParserRuleCall_1_0());
				}
				lv_left_1_0=ruleFuncName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncsRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"test.multiname.dsl.MultiNameDsl.FuncName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_bracket_2_0='('
					{
						newLeafNode(lv_bracket_2_0, grammarAccess.getFuncsAccess().getBracketLeftParenthesisKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFuncsRule());
						}
						setWithLastConsumed($current, "bracket", true, "(");
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getFuncsAccess().getRightParenthesisKeyword_2_1());
			}
		)?
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getFuncsAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuncsRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getFuncsAccess().getRightNameCrossReference_4_0());
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getFuncsAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleVars
entryRuleVars returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	iv_ruleVars=ruleVars
	{ $current=$iv_ruleVars.current; }
	EOF;

// Rule Vars
ruleVars returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarsAccess().getVarKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getVarsAccess().getVarNameParserRuleCall_1());
		}
		this_VarName_1=ruleVarName
		{
			$current = $this_VarName_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getVarsAccess().getSemicolonKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
