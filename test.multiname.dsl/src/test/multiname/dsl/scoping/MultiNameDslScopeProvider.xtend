/*
 * generated by Xtext 2.11.0.RC2
 */
package test.multiname.dsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import test.multiname.dsl.multiNameDsl.FuncName
import test.multiname.dsl.multiNameDsl.Funcs
import test.multiname.dsl.multiNameDsl.MultiNameDslPackage
import test.multiname.dsl.multiNameDsl.VarName

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MultiNameDslScopeProvider extends AbstractMultiNameDslScopeProvider {

override getScope(EObject context, EReference reference) {
	// We want to define the Scope for the Element's superElement cross-reference
	if (context instanceof Funcs) {
		val func = context as Funcs
		if (reference == MultiNameDslPackage.Literals.FUNCS__RIGHT) {
			if (func.bracket) {
				val rootElement = EcoreUtil2.getRootContainer(context)
				val candidates = EcoreUtil2.getAllContentsOfType(rootElement, VarName)
				return Scopes.scopeFor(candidates)
			} else {
				val rootElement = EcoreUtil2.getRootContainer(context)
				val candidates = EcoreUtil2.getAllContentsOfType(rootElement, FuncName)
				return Scopes.scopeFor(candidates)
			}
		}
		return super.getScope(context, reference);
	}
}

}
